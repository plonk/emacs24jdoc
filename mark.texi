@c =============================================================
@c = 元 翻 訳: 高汐一紀＠電気通信大学
@c = 加筆修正: 大木敦雄＠大塚.筑波大学 = 1998/11/25
@c = 20.4改訂: 大木敦雄＠大塚.筑波大学 = 1999/09/12
@c =============================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2001-2012
@c   Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Mark, Killing, Help, Top
@c @chapter The Mark and the Region
@chapter マークとリージョン
@c @cindex mark
@c @cindex setting a mark
@c @cindex region
@cindex マーク
@cindex マークの設定
@cindex リージョン

@c   Many Emacs commands operate on an arbitrary contiguous part of the
@c current buffer.  To specify the text for such a command to operate on,
@c you set @dfn{the mark} at one end of it, and move point to the other
@c end.  The text between point and the mark is called @dfn{the region}.
@c The region always extends between point and the mark, no matter which
@c one comes earlier in the text; each time you move point, the region
@c changes.
Emacsの数多くのコマンドは、カレントバッファの任意の連続領域を操作します。
このようなコマンドに操作対象となるテキストを指定するには、
その一方の端に@dfn{マーク}（mark）を置き、
もう一方の端にポイントを移動します。
リージョンは、常にポイントとマークの間の領域です。どちらが先に来るかは重要ではありません。
ポイントを動かすごとに、リージョンは変ります。

@c @cindex active region
@cindex 活性なリージョン
@c   Setting the mark at a position in the text also @dfn{activates} it.
@c When the mark is active, we say also that the region is active; Emacs
@c indicates its extent by highlighting the text within it, using the
@c @code{region} face (@pxref{Face Customization}).
テキスト上である場所にマークを設定すると、マークは @dfn{活性} になります。
マークが活性のとき、リージョンが活性であるとも言います。
Emacs はリージョンの範囲をその中のテキストを強調表示することで示します。
これには @code{region} フェイスが使われます(@pxref{Face Customization})。

@c   After certain non-motion commands, including any command that
@c changes the text in the buffer, Emacs automatically @dfn{deactivates}
@c the mark; this turns off the highlighting.  You can also explicitly
@c deactivate the mark at any time, by typing @kbd{C-g}
@c (@pxref{Quitting}).
ある種の移動系ではないコマンド(バッファのテキストを変更するコマンドは全て含まれます)
を使うと、Emacs は自動的にマークを @dfn{不活性} にします。
このことで、強調表示がオフになります。
いつでも、@kbd{C-g} をタイプすると、明示的にマークを不活性にすることができます
(@pxref{Quitting})。

@c   The above default behavior is known as Transient Mark mode.
@c Disabling Transient Mark mode switches Emacs to an alternative
@c behavior, in which the region is usually not highlighted.
@c @xref{Disabled Transient Mark}.
上記の挙動は暫定マークモードと呼ばれています。
暫定マークモードを無効にすると Emacs は別の挙動へと切り替わります。
この場合、リージョンは通常強調表示されません。
@xref{Disabled Transient Mark}。

@vindex highlight-nonselected-windows
@c   Setting the mark in one buffer has no effect on the marks in other
@c buffers.  When you return to a buffer with an active mark, the mark is
@c at the same place as before.  When multiple windows show the same
@c buffer, they can have different values of point, and thus different
@c regions, but they all share one common mark position.  @xref{Windows}.
@c Ordinarily, only the selected window highlights its region; however,
@c if the variable @code{highlight-nonselected-windows} is
@c non-@code{nil}, each window highlights its own region.
あるバッファでマークを設定しても、他のバッファのマークには影響がありません。
活性なマークのあるバッファに戻ると、マークは前と同じ場所にあります。
複数のウィンドウで同じバッファを表示しているときには、それぞれのウィンドウは、
異なったポイントの値を持ち得ますので、
異なったリージョンを持ち得ますが、すべてマークの位置は同じです。
@xref{Windows}。
通常、選択されたウィンドウだけがリージョンを強調表示します。
ただし、@code{highlight-nonselected-windows} 変数が 非@code{nil} の場合は、
全てのウィンドウがそれぞれにリージョンを強調表示します。

@menu
* Setting Mark::            Commands to set the mark.
* Marking Objects::         Commands to put region around textual units.
* Using Region::            Summary of ways to operate on contents of the region.
* Mark Ring::               Previous mark positions saved so you can go back there.
* Global Mark Ring::        Previous mark positions in various buffers.
* Shift Selection::         Using shifted cursor motion keys.
* Disabled Transient Mark:: Leaving regions unhighlighted by default.
@end menu

@node Setting Mark
@c @section Setting the Mark
@section マークを設定する

@c   Here are some commands for setting the mark:
マークを設定するコマンドはつぎのとおりです。

@table @kbd
@item C-@key{SPC}
@c Set the mark at point, and activate it (@code{set-mark-command}).
ポイント位置にマークを置き、活性にする（@code{set-mark-command}）。
@item C-@@
@c The same.
上と同様。
@item C-x C-x
@c Set the mark at point, and activate it; then move point where the mark
@c used to be (@code{exchange-point-and-mark}).
ポイント位置にマークを設定し、活性にする。
その後、マークのあった位置にポイントを移動する（@code{exchange-point-and-mark}）。
@item Drag-Mouse-1
@c Set point and the mark around the text you drag across.
ドラッグしたテキストの周囲にポイントとマークを設定する。
@item Mouse-3
@c Set the mark at point, then move point to where you click
@c (@code{mouse-save-then-kill}).
ポイント位置にマークを設定し、クリックした箇所にポイントを移動する
（@code{mouse-save-then-kill}）。
@c @item @samp{Shifted cursor motion keys}
@item @samp{シフトと同時に押された移動キー}
@c Set the mark at point if the mark is inactive, then move point.
@c @xref{Shift Selection}.
マークが不活性の場合はポイント位置にマークを設定し、ポイントを移動する。
@xref{Shift Selection}。
@end table

@kindex C-SPC
@kindex C-@@
@findex set-mark-command
@c   The most common way to set the mark is with @kbd{C-@key{SPC}}
@c (@code{set-mark-command})@footnote{There is no @kbd{C-@key{SPC}}
@c character in @acronym{ASCII}; usually, typing @kbd{C-@key{SPC}} on a
@c text terminal gives the character @kbd{C-@@}.  This key is also bound
@c to @code{set-mark-command}, so unless you are unlucky enough to have
@c a text terminal that behaves differently, you might as well think of
@c @kbd{C-@@} as @kbd{C-@key{SPC}}.}.  This sets the mark where point is,
@c and activates it.  You can then move point away, leaving the mark
@c behind.
マークを設定するのに、一番よくやるのは @kbd{C-@key{SPC}} (@code{set-mark-command})です。
@footnote{@acronym{ASCII} に @kbd{C-@key{SPC}} にという文字はありません。
通常 @kbd{C-@key{SPC}} とテキスト端末でタイプすると @kbd{C-@@} が打ち込まれます。
このキーも @code{set-mark-command} にバインドされています。
したがって、不幸にも挙動の異るテキスト端末を使っているのでないのなら、 
@kbd{C-@@} は @kbd{C-@key{SPC}} のことだと考えて構いません。}
これはポイントの位置にマークを設定し、活性にします。
その後、マークを残したまま、その位置からポイントを移動させることができます。

@c   For example, suppose you wish to convert part of the buffer to upper
@c case.  To accomplish this, go to one end of the desired text, type
@c @kbd{C-@key{SPC}}, and move point until the desired portion of text is
@c highlighted.  Now type @kbd{C-x C-u} (@code{upcase-region}).  This
@c converts the text in the region to upper case, and then deactivates
@c the mark.
たとえば、バッファのある部分をすべて大文字に変換したいとしましょう。
これには、目的のテキストの端に移動し、
@kbd{C-@key{SPC}}と打ち、目的のテキストの全てが強調表示されるまでポイントを移動させます。
続いて@kbd{C-x C-u} （@code{upcase-region}）と打ちます。
これでリージョン内のテキストを大文字に変換され、マークが不活性になります。

@c   Whenever the mark is active, you can deactivate it by typing
@c @kbd{C-g} (@pxref{Quitting}).  Most commands that operate on the
@c region also automatically deactivate the mark, like @kbd{C-x C-u} in
@c the above example.
マークが活性なときはいつでも、@kbd{C-g} (@pxref{Quitting}) をタイプすることで不活性にすることができます。
ほとんどのリージョンに対して作用するコマンドは、上の @kbd{C-x C-u} の例と同様に、
自動的にマークを不活性にします。

@c   Instead of setting the mark in order to operate on a region, you can
@c also use it to ``remember'' a position in the buffer (by typing
@c @kbd{C-@key{SPC} C-@key{SPC}}), and later jump back there (by typing
@c @kbd{C-u C-@key{SPC}}).  @xref{Mark Ring}, for details.
リージョンに対して作用させるためにではなく、
(@kbd{C-@key{SPC} C-@key{SPC}}と打って)バッファの位置を「記憶」させ、
あとで(@kbd{C-u C-@key{SPC}}と打って)その位置に戻るためにマークを設定することもできます。
詳細は、@xref{Mark Ring}。

@kindex C-x C-x
@findex exchange-point-and-mark
@c   The command @kbd{C-x C-x} (@code{exchange-point-and-mark}) exchanges
@c the positions of point and the mark.  @kbd{C-x C-x} is useful when you
@c are satisfied with the position of point but want to move the other
@c end of the region (where the mark is).  Using @kbd{C-x C-x} a second
@c time, if necessary, puts the mark at the new position with point back
@c at its original position.  Normally, if the mark is inactive, this
@c command first reactivates the mark wherever it was last set, to ensure
@c that the region is left highlighted.  However, if you call it with a
@c prefix argument, it leaves the mark inactive and the region
@c unhighlighted; you can use this to jump to the mark in a manner
@c similar to @kbd{C-u C-@key{SPC}}.
@kbd{C-x C-x} (@code{exchange-point-and-mark}) コマンドはポイントとマークの位置を交換します。
@kbd{C-x C-x} が便利なのは、ポイントの位置には満足しているが、リージョンの反対側の端(マークのある位置)を移動させたい時です。
必要ならば、もう一度 @kbd{C-x C-x} を使うと、マークを新しい位置に、ポイントを元に位置に配置することができます。
通常、マークが不活性ならば、このコマンドはまず、最後に設定された位置のマークを再び活性にるので、リージョンがハイライトされます。
ただし、前置引数付きで呼び出されると、マークは不活性のままにし、リージョンはハイライトされません。
このことを利用して @kbd{C-u C-@key{SPC}} 風にマークへと移動することができます。

@c   You can also set the mark with the mouse.  If you press the left
@c mouse button (@kbd{down-mouse-1}) and drag the mouse across a range of
@c text, this sets the mark where you first pressed the mouse button and
@c puts point where you release it.  Alternatively, clicking the right
@c mouse button (@kbd{mouse-3}) sets the mark at point and then moves
@c point to where you clicked.  @xref{Mouse Commands}, for a more
@c detailed description of these mouse commands.
マークを使ってマークを設定することもできます。
左マウスボタンを押し下げて(@kbd{down-mouse-1})、
テキストの領域をマウスでドラッグすると、
マークが最初にマウスボタンを押し下げた位置に設定され
ポイントがボタンが離された位置に移動します。
別の方法として、右マウスボタンを(@kbd{mouse-3}) をクリックすると、
マークがポイント位置に設定され、ポイントがクリックされた位置に移動します。
これらのマウスコマンドのより詳細な説明には、@xref{Mouse Commands}。

@c @cindex shift-selection
@cindex シフト選択
@c   Finally, you can set the mark by holding down the shift key while
@c typing certain cursor motion commands (such as @kbd{S-@key{right}},
@c @kbd{S-C-f}, @kbd{S-C-n}, etc.)  This is called @dfn{shift-selection}.
@c It sets the mark at point before moving point, but only if there is no
@c active mark set via shift-selection.  The mark set by mouse commands
@c and by shift-selection behaves slightly differently from the usual
@c mark: any subsequent unshifted cursor motion command deactivates it
@c automatically.  For details, @xref{Shift Selection}.
最後に、シフトキーを押し下げながら、ある種のカーソル移動コマンド(例えば@kbd{S-@key{right}}、 @kbd{S-C-f}、 @kbd{S-C-n} 等)を打つことでもマークを設定できます。
これは @dfn{シフト選択}と呼ばれています。
これは、ポイントが動かされる前にマークを設定します。
ただし、まだシフト選択によって活性なマークが設定されていない場合に限ります。
マウスコマンドやシフト選択によって設定されたマークは、
通常のマークと少々異った挙動になります。
シフトキーを伴わない移動コマンドで、不活性になるのです。
詳細は、@xref{Shift Selection}。

@c   Many commands that insert text, such as @kbd{C-y} (@code{yank}), set
@c the mark at the other end of the inserted text, without activating it.
@c This lets you easily return to that position (@pxref{Mark Ring}).  You
@c can tell that a command does this when it shows @samp{Mark set} in the
@c echo area.
@kbd{C-y} (@code{yank}) などのテキストを挿入するコマンドの多くは、
挿入されたテキストの反対側に、活性でないマークを設定します。
これにより、その場所に簡単に戻ることができます(@pxref{Mark Ring})。
エコー領域に @samp{Mark set} と表示されれば、
コマンドがこれを行なっていることがわかります。

@c @cindex primary selection
@cindex 一次セレクション
@c   Under X, every time the active region changes, Emacs saves the text
@c in the region to the @dfn{primary selection}.  This lets you insert
@c that text into other X applications with @kbd{mouse-2} clicks.
@c @xref{Primary Selection}.
X では、活性なリージョンが変更されるたびに、Emacs は @dfn{一次セレクション} にリージョンのテキストを保存します。
このことにより、@kbd{mouse-2} のクリックで、他の X アプリケーションにそのテキストを挿入することができるようになります。
@xref{Primary Selection}。

@node Marking Objects
@c @section Commands to Mark Textual Objects
@section テキストオブジェクトをマークするコマンド


@c @cindex marking sections of text
@cindex テキストの一部をマーク付けする
@c   Here are commands for placing point and the mark around a textual
@c object such as a word, list, paragraph or page:
単語、リスト、段落、ページといったテキストのまとまりに
ポイントやマークを置くコマンドがあります。

@table @kbd
@item M-@@
@c Set mark after end of next word (@code{mark-word}).  This does not
@c move point.
つぎの語の末尾にマークを設定する（@code{mark-word}）。
このコマンドはポイントを移動しない。
@item C-M-@@
@c Set mark after end of following balanced expression
@c (@code{mark-sexp}).  This does not move point.
つぎの均衡式の末尾にマークを設定する（@code{mark-sexp}）。
このコマンドはポイントを移動しない。
@item M-h
@c Move point to the beginning of the current paragraph, and set mark at
@c the end (@code{mark-paragraph}).
現在の段落の先頭にポイントを移動し、末尾にマークを設定する(@code{mark-paragraph})。
@item C-M-h
@c Move point to the beginning of the current defun, and set mark at the
@c end (@code{mark-defun}).
現在の defun の先頭にポイントを移動し、末尾にマークを設定する(@code{mark-defun})。
@item C-x C-p
@c Move point to the beginning of the current page, and set mark at the
@c end (@code{mark-page}).
現在のページの先頭にポイントを移動し、末尾にマークを設定する (@code{mark-page})。
@item C-x h
@c Move point to the beginning of the buffer, and set mark at the end
@c (@code{mark-whole-buffer}).
バッファの先頭にポイントを移動し、末尾にマークを設定する(@code{mark-whole-buffer})。
@end table

@kindex M-@@
@findex mark-word
@c   @kbd{M-@@} (@code{mark-word}) sets the mark at the end of the next
@c word (@pxref{Words}, for information about words).  Repeated
@c invocations of this command extend the region by advancing the mark
@c one word at a time.  As an exception, if the mark is active and
@c located before point, @kbd{M-@@} moves the mark backwards from its
@c current position one word at a time.
@kbd{M-@@} (@code{mark-word}) は次の単語 (単語に関する情報は、@pxref{Words})
の末尾にマークを設定します。
このコマンドを繰り返し呼び出すと、マークを１単語ずつ前に進めて、リージョンを拡大させます。
例外として、マークが活性でポイントよりも前の位置に設定されている場合、
@kbd{M-@@} はマークを現在の位置から１単語ずつ後ろ向きに移動させます。

@c   This command also accepts a numeric argument @var{n}, which tells it
@c to advance the mark by @var{n} words.  A negative argument moves the
@c mark back by @var{n} words.
このコマンドは数引数 @var{n} も受け付け、これはマークを @var{n} 単語分進めることを指示します。
負の引数はマークを @var{n} 単語分後ろに移動させます。

@kindex C-M-@@
@findex mark-sexp
@c   Similarly, @kbd{C-M-@@} (@code{mark-sexp}) puts the mark at the end
@c of the next balanced expression (@pxref{Expressions}).  Repeated
@c invocations extend the region to subsequent expressions, while
@c positive or negative numeric arguments move the mark forward or
@c backward by the specified number of expressions.
同様に、@kbd{C-M-@@} (@code{mark-sexp}) はマークを次の均衡式の末尾に配置します(@pxref{Expressions})。
繰り返し呼び出すと、後続の式へとリージョンを拡大します。
正・負の数引数はマークを指定された数の式の分、前進・後退させます。

@c    The other commands in the above list set both point and mark, so as
@c to delimit an object in the buffer.  @kbd{M-h} (@code{mark-paragraph})
@c marks paragraphs (@pxref{Paragraphs}), @kbd{C-M-h} (@code{mark-defun})
@c marks top-level definitions (@pxref{Moving by Defuns}), and @kbd{C-x
@c C-p} (@code{mark-page}) marks pages (@pxref{Pages}).  Repeated
@c invocations again play the same role, extending the region to
@c consecutive objects; similarly, numeric arguments specify how many
@c objects to move the mark by.
上記のリストのその他のコマンドはポイントとマークの両方を設定し、
バッファ内のオブジェクトを区切ります。
@kbd{M-h} (@code{mark-paragraph}) は段落をマークし (@pxref{Paragraphs})、
@kbd{C-M-h} (@code{mark-defun}) はトップレベルの定義をマークし (@pxref{Moving by Defuns})、
@kbd{C-x C-p} (@code{mark-page}) はページをマークします (@pxref{Pages})。
反復呼び出しも同じ機能を担っており、リージョンを隣り合ったオブジェクトへと拡大させます。
同様に、数引数はマークをオブジェクトいくつ分動かすのかを指定します。

@kindex C-x h
@findex mark-whole-buffer
@c @cindex select all
@cindex すべて選択
@c   @kbd{C-x h} (@code{mark-whole-buffer}) sets up the entire buffer as
@c the region, by putting point at the beginning and the mark at the end.
@kbd{C-x h} (@code{mark-whole-buffer}) はバッファの先頭にポイントを、
末尾にマークを配置し、バッファ全体をリージョンとして設定します。

@node Using Region
@c @section Operating on the Region
@section リージョンに対する操作

@c @cindex operations on a marked region
@cindex マーク付けしたリージョンに対する操作
@c   Once you have a region, here are some of the ways you can operate on
@c it:
いったんリージョンを設定すれば、以下のようにリージョンを操作できます。

@itemize @bullet
@item
@c Kill it with @kbd{C-w} (@pxref{Killing}).
@kbd{C-w}コマンドでキルする（@pxref{Killing}）。
@item
@c Copy it to the kill ring with @kbd{M-w} (@pxref{Yanking}).
@kbd{M-w} でキルリングにコピーする(@pxref{Yanking})。
@item
@c Convert case with @kbd{C-x C-l} or @kbd{C-x C-u} (@pxref{Case}).
@kbd{C-x C-l}や@kbd{C-x C-u}で大文字小文字を変換する（@pxref{Case}）。
@item
@c Undo changes within it using @kbd{C-u C-/} (@pxref{Undo}).
@kbd{C-u C-/} でリージョン内での変更をアンドゥする(@pxref{Undo})。
@item
@c Replace text within it using @kbd{M-%} (@pxref{Query Replace}).
@kbd{M-%} でリージョン内のテキストを置換する(@pxref{Query Replace})。
@item
@c Indent it with @kbd{C-x @key{TAB}} or @kbd{C-M-\} (@pxref{Indentation}).
@kbd{C-x @key{TAB}} や @kbd{C-M-\} でインデントする(@pxref{Indentation})。
@item
@c Fill it as text with @kbd{M-x fill-region} (@pxref{Filling}).
@kbd{M-x fill-region}でテキストを詰め込む（@pxref{Filling}）。
@item
@c Check the spelling of words within it with @kbd{M-$} (@pxref{Spelling}).
@kbd{M-$} でリージョン内の単語のスペルをチェックする(@pxref{Spelling})。
@item
@c Evaluate it as Lisp code with @kbd{M-x eval-region} (@pxref{Lisp Eval}).
@kbd{M-x eval-region}でLispコードとして評価する（@pxref{Lisp Eval}）。
@item
@c Save it in a register with @kbd{C-x r s} (@pxref{Registers}).
@kbd{C-x r s} でレジスタに保存する（@pxref{Registers}）。
@item
@c Save it in a buffer or a file (@pxref{Accumulating Text}).
バッファやファイルに保存する（@pxref{Accumulating Text}）。
@end itemize

@c   Some commands have a default behavior when the mark is inactive, but
@c operate on the region if the mark is active.  For example, @kbd{M-$}
@c (@code{ispell-word}) normally checks the spelling of the word at
@c point, but it checks the text in the region if the mark is active
@c (@pxref{Spelling}).  Normally, such commands use their default
@c behavior if the region is empty (i.e., if mark and point are at the
@c same position).  If you want them to operate on the empty region,
@c change the variable @code{use-empty-active-region} to @code{t}.
一部のコマンドはマークが不活性の時のデフォルトの挙動がありますが、
マークが活性の時はリージョンに対して作用します。
例えば、@kbd{M-$} (@code{ispell-word})は、通常ポイント位置の単語のスペルを
チェックしますが、マークが活性の時はリージョンのテキストをチェックします
(@pxref{Spelling})。
通常、このようなコマンドはリージョンが空の時(つまり、マークとポイントが同じ位置にある時)は、
デフォルトの挙動を使います。
空のリージョンに対して作用して欲しい場合は、@code{use-empty-active-region}
を @code{t}に設定します。

@vindex delete-active-region
@c   As described in @ref{Erasing}, the @key{DEL}
@c (@code{backward-delete-char}) and @key{delete}
@c (@code{delete-forward-char}) commands also act this way.  If the mark
@c is active, they delete the text in the region.  (As an exception, if
@c you supply a numeric argument @var{n}, where @var{n} is not one, these
@c commands delete @var{n} characters regardless of whether the mark is
@c active).  If you change the variable @code{delete-active-region} to
@c @code{nil}, then these commands don't act differently when the mark is
@c active.  If you change the value to @code{kill}, these commands
@c @dfn{kill} the region instead of deleting it (@pxref{Killing}).
@ref{Erasing} で述べたように、@key{DEL} (@code{backward-delete-char})
コマンド と @key{delete}(@code{delete-forward-char}) コマンドもこのように振舞います。
マークが活性ならば、これらはリージョンのテキストを削除します。
(例外として、1 でない数引数 @var{n} を与えた場合は、
マークが活性であるかに関わらず @var{n} 個の文字を削除します。)
 @code{delete-active-region} 変数を @code{nil} に変更すれば、
これらのコマンドは マークが活性でも特殊な動作を行いません。
値を @code{kill}に変更した場合は、リージョンを削除するかわりに @dfn{キル}します (@pxref{Killing})。

@vindex mark-even-if-inactive
@c   Other commands always operate on the region, and have no default
@c behavior.  Such commands usually have the word @code{region} in their
@c names, like @kbd{C-w} (@code{kill-region}) and @code{C-x C-u}
@c (@code{upcase-region}).  If the mark is inactive, they operate on the
@c ``inactive region''---that is, on the text between point and the
@c position at which the mark was last set (@pxref{Mark Ring}).  To
@c disable this behavior, change the variable
@c @code{mark-even-if-inactive} to @code{nil}.  Then these commands will
@c instead signal an error if the mark is inactive.
その他のコマンドは常にリージョンに対して作用し、デフォルトの挙動はありません。
このようなコマンドは、@kbd{C-w} (@code{kill-region}) や @code{C-x C-u}
(@code{upcase-region}) の様に、名前に @code{region} という単語が含まれています。
マークが不活性の場合は、「不活性なリージョン」(つまり、ポイントと最後にマークが設定された位置の間にあるテキスト)に対して作用します(@pxref{Mark Ring})。
この挙動を変えるには、@code{mark-even-if-inactive} を @code{nil} に変更します。
この場合、マークが不活性の場合にはエラーが発せられるようになります。

@c @cindex Delete Selection mode
@cindex セレクション削除モード
@c @cindex mode, Delete Selection
@c @cindex mode, Delete Selection
@findex delete-selection-mode
@c   By default, text insertion occurs normally even if the mark is
@c active---for example, typing @kbd{a} inserts the character @samp{a},
@c then deactivates the mark.  If you enable Delete Selection mode, a
@c minor mode, then inserting text while the mark is active causes the
@c text in the region to be deleted first.  To toggle Delete Selection
@c mode on or off, type @kbd{M-x delete-selection-mode}.
デフォルトでは、テキストの挿入はマークが活性であっても通常通り起こります。
例えば、@kbd{a} をタイプすると @samp{a} が挿入され、マークが不活性になります。
マイナーモードの Delete Selection モードを有効にした場合、マークがアクティブな時にテキストを挿入するとまずリージョンのテキストが削除されます。
Delete Selectionモードを切り替えるには、@kbd{M-x delete-selection-mode} と打ちます。

@node Mark Ring
@c @section The Mark Ring
@section マークリング

@c @cindex mark ring
@cindex mark ring
@c   Each buffer remembers previous locations of the mark, in the
@c @dfn{mark ring}.  Commands that set the mark also push the old mark
@c onto this ring.  One of the uses of the mark ring is to remember spots
@c that you may want to go back to.
個々のバッファマークの過去の位置を@dfn{マークリング}に保存しています。
マークを設定するコマンドは、古いマークをこのリングに押し込みます。
マークリングの使い道には例えば、後で戻りたくなるかもしれない箇所の記憶があります。

@table @kbd
@item C-@key{SPC} C-@key{SPC}
@c Set the mark, pushing it onto the mark ring, without activating it.
マークをセットして、マークリングに押し込めるが、活性化はしない。
@item C-u C-@key{SPC}
@c Move point to where the mark was, and restore the mark from the ring
@c of former marks.
ポイントをマークがあった位置に移動し、過去のマークのリングからマークを復元する。
@end table

@kindex C-SPC C-SPC
@c   The command @kbd{C-@key{SPC} C-@key{SPC}} is handy when you want to
@c use the mark to remember a position to which you may wish to return.
@c It pushes the current point onto the mark ring, without activating the
@c mark (which would cause Emacs to highlight the region).  This is
@c actually two consecutive invocations of @kbd{C-@key{SPC}}
@c (@code{set-mark-command}); the first @kbd{C-@key{SPC}} sets the mark,
@c and the second @kbd{C-@key{SPC}} deactivates it.  (When Transient Mark
@c mode is off, @kbd{C-@key{SPC} C-@key{SPC}} instead activates Transient
@c Mark mode temporarily; @pxref{Disabled Transient Mark}.)

  @kbd{C-@key{SPC} C-@key{SPC}} コマンド は後で戻りたくなるかもしれない位置を記憶させるのにマークを使いたい場合に便利です。
これは、現在のポイントを(リージョンがハイライトされないように)活性化させずに
マークリングに押し込めます。
これは実は、@kbd{C-@key{SPC}} (@code{set-mark-command})の二回連続の呼び出しです。
最初の@kbd{C-@key{SPC}}  でマークを設定し、二度目の@kbd{C-@key{SPC}} でそれを非活性化しています。
(暫定マークモードがオフの場合、 @kbd{C-@key{SPC} C-@key{SPC}} は代わりに一時的に暫定マークモードを有効にします。@pxref{Disabled Transient Mark})

@kindex C-u C-SPC
@c   To return to a marked position, use @code{set-mark-command} with a
@c prefix argument: @kbd{C-u C-@key{SPC}}.  This moves point to where the
@c mark was, and deactivates the mark if it was active.  Each subsequent
@c @kbd{C-u C-@key{SPC}} jumps to a prior position stored in the mark
@c ring.  The positions you move through in this way are not lost; they
@c go to the end of the ring.
マークした位置に戻るには、 @code{set-mark-command} を前置引数付きで(@kbd{C-u C-@key{SPC}})使います。
これはマークがあった場所にポイントを移動し、マークが活性ならば非活性にします。
これ以降、@kbd{C-u C-@key{SPC}} を使うごとに、マークリングに保存された以前の場所に移動します。
このように転々と移動する位置は失われはしません。これらの位置はリングの末尾に移動されます。

@vindex set-mark-command-repeat-pop
@c   If you set @code{set-mark-command-repeat-pop} to non-@code{nil},
@c then immediately after you type @kbd{C-u C-@key{SPC}}, you can type
@c @kbd{C-@key{SPC}} instead of @kbd{C-u C-@key{SPC}} to cycle through
@c the mark ring.  By default, @code{set-mark-command-repeat-pop} is
@c @code{nil}.
@code{set-mark-command-repeat-pop} を 非@code{nil} に設定すると、
@kbd{C-u C-@key{SPC}} をタイプした直後に、@kbd{C-u C-@key{SPC}} の代わりに
@kbd{C-@key{SPC}}をタイプして、マークリングを辿ることができます。
デフォルトでは、@code{set-mark-command-repeat-pop} は @code{nil}です。

@c   Each buffer has its own mark ring.  All editing commands use the
@c current buffer's mark ring.  In particular, @kbd{C-u C-@key{SPC}}
@c always stays in the same buffer.
バッファごとに固有のマークリングがあります。全ての編集コマンドはカレントバッファのマークリングを使います。特に、@kbd{C-u C-@key{SPC}} は常に同じバッファにとどまります。

@vindex mark-ring-max
@c   The variable @code{mark-ring-max} specifies the maximum number of
@c entries to keep in the mark ring.  This defaults to 16 entries.  If
@c that many entries exist and another one is pushed, the earliest one in
@c the list is discarded.  Repeating @kbd{C-u C-@key{SPC}} cycles through
@c the positions currently in the ring.
変数@code{mark-ring-max}は、マークリングに保存する最大項目数を指定します。
デフォルトは 16 項目です。
すでに多くの項目が存在していて、さらにもう1つ押し込むときには、
リスト内の最古の項目を捨てます。
@kbd{C-u C-@key{SPC}}を繰り返し実行すると、
いまマークリングに入っている位置を巡回することになります。

@c   If you want to move back to the same place over and over, the mark
@c ring may not be convenient enough.  If so, you can record the position
@c in a register for later retrieval (@pxref{Position Registers,, Saving
@c Positions in Registers}).
もし同じ場所に何度も繰替えし戻りたいなら、マークリングでは不足かもしれません。
その場合は、位置を将来取り出せるようにレジスタに保存しておくことができます
(@pxref{Position Registers,, Saving Positions in Registers})。

@node Global Mark Ring
@c @section The Global Mark Ring
@section グローバルマークリング
@c @cindex global mark ring
@cindex グローバルマークリング

@vindex global-mark-ring-max
@c   In addition to the ordinary mark ring that belongs to each buffer,
@c Emacs has a single @dfn{global mark ring}.  Each time you set a mark,
@c this is recorded in the global mark ring in addition to the current
@c buffer's own mark ring, if you have switched buffers since the
@c previous mark setting.  Hence, the global mark ring records a sequence
@c of buffers that you have been in, and, for each buffer, a place where
@c you set the mark.  The length of the global mark ring is controlled by
@c @code{global-mark-ring-max}, and is 16 by default.
個々のバッファごとの普通のマークリングに加えて、
Emacsには@dfn{グローバルマークリング}（global mark ring）が1つあります。
前回のマークの設定からバッファを切り替えた場合、マークを設定するとカレントバッファのマークリングに加えて、グローバルマークリングにもこれが記録されます。
よって、グローバルマークリングには訪れていたバッファと、そのバッファで設定されたマークの位置の系列が記録されていることになります。
グローバルマークリングの長さは @code{global-mark-ring-max} によって制御されており、デフォルトで 16 です。

@kindex C-x C-@key{SPC}
@findex pop-global-mark
@c   The command @kbd{C-x C-@key{SPC}} (@code{pop-global-mark}) jumps to
@c the buffer and position of the latest entry in the global ring.  It also
@c rotates the ring, so that successive uses of @kbd{C-x C-@key{SPC}} take
@c you to earlier buffers and mark positions.
@kbd{C-x C-@key{SPC}} (@code{pop-global-mark}) コマンドはグローバルリングの最新の項目にあるバッファ及び位置に移動します。
これはリングの回転も行いますので、連続して @kbd{C-x C-@key{SPC}}  を使うと
さらに過去のバッファ及びマーク位置へと移動できます。

@node Shift Selection
@c @section Shift Selection
@section シフト選択
@c @cindex shift-selection
@cindex シフト選択

@c   If you hold down the shift key while typing a cursor motion command,
@c this sets the mark before moving point, so that the region extends
@c from the original position of point to its new position.  This feature
@c is referred to as @dfn{shift-selection}.  It is similar to the way
@c text is selected in other editors.
カーソル移動コマンドを打つ時にシフトキーを押し下げていると、ポイントを移動する前にマークを設定します。
したがってポイントの元の位置から今の位置へとリージョンが広がります。
この機能は @dfn{シフト選択} と言います。
他のエディタでテキストが選択される方法に似ています。

@c   The mark set via shift-selection behaves a little differently from
@c what we have described above.  Firstly, in addition to the usual ways
@c of deactivating the mark (such as changing the buffer text or typing
@c @kbd{C-g}), the mark is deactivated by any @emph{unshifted} cursor
@c motion command.  Secondly, any subsequent @emph{shifted} cursor motion
@c command avoids setting the mark anew.  Therefore, a series of shifted
@c cursor motion commands will continuously adjust the region.
シフト選択で設定されたマークは上の述べたものとは少々異った挙動をします。
まず、マークを非活性にする通常の方法(バッファのテキストを変更する、@kbd{C-g} をタイプする等)に加えて、@emph{シフト無し}のカーソル移動コマンドによってもマークが非活性にされます。
次に、以降の@emph{シフト付き}のカーソル移動コマンドはマークを新たに設定しません。
したがって、連続したシフト付きのカーソル移動コマンドは、リージョンを連続的に調整します。

@c   Shift-selection only works if the shifted cursor motion key is not
@c already bound to a separate command (@pxref{Customization}).  For
@c example, if you bind @kbd{S-C-f} to another command, typing
@c @kbd{S-C-f} runs that command instead of performing a shift-selected
@c version of @kbd{C-f} (@code{forward-char}).
シフト選択はシフト付きのカーソル移動キーが別のコマンドにバインドされてる場合は動作しません
 (@pxref{Customization})。
例えば、ユーザが @kbd{S-C-f}を別のコマンドにバインドすると、
@kbd{S-C-f} はそのコマンドを実行し、@kbd{C-f}(@code{forward-char})のシフト選択版は実行されません。

@c   A mark set via mouse commands behaves the same as a mark set via
@c shift-selection (@pxref{Setting Mark}).  For example, if you specify a
@c region by dragging the mouse, you can continue to extend the region
@c using shifted cursor motion commands.  In either case, any unshifted
@c cursor motion command deactivates the mark.
マウスコマンドによって設定されたマークは、シフト選択で設定されたマークと同じように振舞います
(@pxref{Setting Mark})。
例えば、マウスのドラッグでリージョンを指定した場合、それに続けて、シフト付きのカーソル移動コマンドでリージョンを拡大することができます。
どちらの場合も、シフト無しのカーソル移動コマンドはマークを非活性にします。

@c   To turn off shift-selection, set @code{shift-select-mode} to
@c @code{nil}.  Doing so does not disable setting the mark via mouse
@c commands.
シフト選択を無効にするには、@code{shift-select-mode} を @code{nil} に設定してください。
これは、マウスコマンドによるマークの設定は無効にしません。

@node Disabled Transient Mark
@c @section Disabling Transient Mark Mode
@section 暫定マークモードを無効にする
@c @cindex mode, Transient Mark
@c @cindex Transient Mark mode
@c @cindex highlighting region
@c @cindex region highlighting
@c @cindex Zmacs mode
@cindex 暫定マークモード
@cindex リージョンを強調表示する
@cindex リージョンの強調表示
@cindex Zmacs モード
@findex transient-mark-mode

@c   The default behavior of the mark and region, in which setting the
@c mark activates it and highlights the region, is called Transient Mark
@c mode.  This is a minor mode that is enabled by default.  It can be
@c toggled with @kbd{M-x transient-mark-mode}, or with the @samp{Active
@c Region Highlighting} menu item in the @samp{Options} menu.  Turning it
@c off switches Emacs to an alternative mode of operation:
マークとリージョンのデフォルトの挙動は、マークを活性にし、リージョンを強調表示することですが、これは暫定マークモードと呼ばれています。
これはデフォルトで有効にされているマイナーモードです。
@kbd{M-x transient-mark-mode} を使うか、@samp{Options} メニューの
 @samp{Active Region Highlighting} メニュー項目で切り替えることができます。
無効にすると、Emacs は代替の動作モードに切り替わります。

@itemize @bullet
@item
@c Setting the mark, with commands like @kbd{C-@key{SPC}} or @kbd{C-x
@c C-x}, does not highlight the region.  Therefore, you can't tell by
@c looking where the mark is located; you have to remember.
@kbd{C-@key{SPC}} や @kbd{C-x C-x} のようなのコマンドによるマークの設定は、
リージョンを強調表示しません。
したがって、マークの位置は目で見てもわかりませんので、覚える必要があります。

@c The usual solution to this problem is to set the mark and then use it
@c soon, before you forget where it is.  You can also check where the
@c mark is by using @kbd{C-x C-x}, which exchanges the positions of the
@c point and the mark (@pxref{Setting Mark}).
この問題は通常、マークを設定したあと直ぐに、場所を忘れる前にマークを使うことで、
対処されます。
@kbd{C-x C-x} を使ってマークの位置を確認することもできます。
これはポイントとマークの位置を交換します(@pxref{Setting Mark})。

@item
@c Many commands that move point long distances, like @kbd{M-<} and
@c @kbd{C-s}, first set the mark where point was.
@kbd{M-<} や @kbd{C-s} のように、長い距離にわたってポイントを移動するコマンドの多くは、
まずポイントがあった位置にマークを設定します。

@item
@c Some commands, which ordinarily act on the region when the mark is
@c active, no longer do so.  For example, normally @kbd{M-%}
@c (@code{query-replace}) performs replacements within the region, if the
@c mark is active.  When Transient Mark mode is off, it always operates
@c from point to the end of the buffer.  Commands that act this way are
@c identified in their own documentation.
マークが活性な時は通常リージョンに対して作用するようなコマンドは、
マークを設定しなくなりました。
例えば、通常 @kbd{M-%} (@code{query-replace}) は、マークが活性な場合は、
リージョンに対して置換を行いますが、暫定マークモードがオフの場合は、
いつでもポイント位置からバッファの末尾までに作用します。
このように振る舞うコマンドは、コマンドのドキュメントにそう書かれています。
@end itemize

@c   While Transient Mark mode is off, you can activate it temporarily
@c using @kbd{C-@key{SPC} C-@key{SPC}} or @kbd{C-u C-x C-x}.
暫定マークモードがオフの時でも、@kbd{C-@key{SPC} C-@key{SPC}} あるいは @kbd{C-u C-x C-x} を使って一時的に有効にすることができます。

@table @kbd
@item C-@key{SPC} C-@key{SPC}
@kindex C-@key{SPC} C-@key{SPC}
@c Set the mark at point (like plain @kbd{C-@key{SPC}}) and enable
@c Transient Mark mode just once, until the mark is deactivated.  (This
@c is not really a separate command; you are using the @kbd{C-@key{SPC}}
@c command twice.)
(ただの @kbd{C-@key{SPC}} と同様に)ポイント位置にマークを設定し、
暫定マークモードをマークが非活性になるまで一時的に有効にする

@item C-u C-x C-x
@kindex C-u C-x C-x
@c Activate the mark and enable Transient Mark mode temporarily, until
@c the mark is next deactivated.  (This is the @kbd{C-x C-x} command,
@c @code{exchange-point-and-mark}, with a prefix argument.)
マークを活性にし、暫定マークモードを次にマークが非活性になるまで一時的に有効にする。
(これは 前置引数付きの @kbd{C-x C-x} @code{exchange-point-and-mark} コマンドです。)
@end table

@c   These commands set or activate the mark, and enable Transient Mark
@c mode only until the mark is deactivated.  One reason you may want to
@c use them is that some commands operate on the entire buffer instead of
@c the region when Transient Mark mode is off.  Enabling Transient Mark
@c mode momentarily gives you a way to use these commands on the region.
これらのコマンドはマークを設定あるいは活性化し、暫定マークモードを一時的に、
マークが非活性にされるまで有効にします。
これを使う理由には、一部のコマンドは暫定マークモードがオフの時は、リージョンではなくバッファ全体に対して作用することが挙げられます。
暫定マークモードを一時的に有効にすることで、これらのコマンドをリージョンに対して使うことができます。

@c   When you specify a region with the mouse (@pxref{Setting Mark}), or
@c with shift-selection (@pxref{Shift Selection}), this likewise
@c activates Transient Mark mode temporarily and highlights the region.
マウスや(@pxref{Setting Mark})シフト選択(@pxref{Shift Selection})でリージョンを指定した場合も、同様に暫定マークモードを一時的に有効にし、リージョンを強調表示します。
