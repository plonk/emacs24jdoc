@c =============================================================
@c = 元 翻 訳: 高汐一紀＠電気通信大学
@c = 加筆修正: 大木敦雄＠大塚.筑波大学 = 1998/11/25
@c = 20.4改訂: 大木敦雄＠大塚.筑波大学 = 1999/09/12
@c =============================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2012
@c   Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Basic, Minibuffer, Exiting, Top
@c @chapter Basic Editing Commands
@chapter 基本編集コマンド

@kindex C-h t
@findex help-with-tutorial
@c   Here we explain the basics of how to enter text, make corrections,
@c and save the text in a file.  If this material is new to you, we
@c suggest you first run the Emacs learn-by-doing tutorial, by typing
@c @kbd{C-h t} (@code{help-with-tutorial}).
ここでは、テキストの入力、修正、ファイルへの保存といった基本操作について説明します。
これらに接するのが初めてという読者は、
まず手を動かしながら学ぶ Emacs チュートリアルを実行しすることをお勧めします。
チュートリアルを利用するには、
@kbd{C-h t} (@code{help-with-tutorial}) と打ちます。
@footnote{【訳注】Emacsのインストールの仕方によっては、
きちんと日本語のチュートリアルが表示される。
そうでなければ、
@kbd{M-x set-language-environment @key{RET} Japanese @key{RET}}（あるいは、
@kbd{C-x @key{RET} l Japanese @key{RET}}）と打ってから、
改めて@kbd{Control-h t}と打つ。
日本語以外にもいくつかの言語のチュートリアルがある。}

@menu

* Inserting Text::      Inserting text by simply typing it.
* Moving Point::        Moving the cursor to the place where you want to
                          change something.
* Erasing::             Deleting and killing text.
* Basic Undo::          Undoing recent changes in the text.
* Files: Basic Files.   Visiting, creating, and saving files.
* Help: Basic Help.     Asking what a character does.
* Blank Lines::         Making and deleting blank lines.
* Continuation Lines::  How Emacs displays lines too wide for the screen.
* Position Info::       What line, row, or column is point on?
* Arguments::           Numeric arguments for repeating a command N times.
* Repeating::           Repeating the previous command quickly.
@end menu

@node Inserting Text
@c @section Inserting Text
@section テキストを挿入する

@c @cindex insertion
@c @cindex graphic characters
@cindex 挿入
@cindex 図形文字
@c   You can insert an ordinary @dfn{graphic character} (e.g., @samp{a},
@c @samp{B}, @samp{3}, and @samp{=}) by typing the associated key.  This
@c adds the character to the buffer at point.  Insertion moves point
@c forward, so that point remains just after the inserted text.
@c @xref{Point}.
通常の@dfn{図形文字}(例えば @samp{a}、@samp{B}、@samp{3}、@samp{=})は、
それが印字されたキーを打つことで挿入できます。
これはバッファのポイント位置に文字を追加します。
挿入するとポイントは前に進みますので、ポイントは挿入されたテキストの直後から動きません。
@xref{Point}。

@kindex RET
@c @cindex newline
@cindex 改行
@c   To end a line and start a new one, type @key{RET} (@code{newline}).
@c (The @key{RET} key may be labeled @key{Return} or @key{Enter} on your
@c keyboard, but we refer to it as @key{RET} in this manual.)  This
@c command inserts a newline character into the buffer.  If point is at
@c the end of the line, the effect is to create a new blank line after
@c it; if point is in the middle of a line, the line is split at that
@c position.
行を終えて新たな行を始めるには、@key{RET}を打ちます (@code{newline})。
(@key{RET} には、@key{Return} や @key{Enter} と印刷されているかもしれませんが、
このマニュアルでは @key{RET} と呼びます。)
これコマンドは、バッファに改行文字を挿入します。
ポイントが行末にあるときは、その行の次に新しい空の行を作ります。
行の途中にある場合、@key{RET}はその位置で行を分割します。

@c   As we explain later in this manual, you can change the way Emacs
@c handles text insertion by turning on @dfn{minor modes}.  For instance,
@c the minor mode called Auto Fill mode splits lines automatically when
@c they get too long (@pxref{Filling}).  The minor mode called Overwrite
@c mode causes inserted characters to replace (overwrite) existing text,
@c instead of shoving it to the right.  @xref{Minor Modes}.
このマニュアルで後述しますが、Emacs がテキストの挿入の扱い方は、
各種の@dfn{マイナーモード}をオンにすることで、変更することができます。
例えば @dfn{自動詰め込み}（auto-fill）モードと呼ばれるマイナーモードは、
行が長くなりすぎると自動的に分割します(@pxref{Filling})。
上書き（overwrite）モードと呼ばれるマイナーモードは、
挿入された文字が既存のテキストを右に押しやるのではなく、
テキストを置き換える(上書きする)ようにします。
@xref{Minor Modes}。

@c @cindex quoting
@cindex クォート
@kindex C-q
@findex quoted-insert
@c   Only graphic characters can be inserted by typing the associated
@c key; other keys act as editing commands and do not insert themselves.
@c For instance, @kbd{DEL} runs the command @code{delete-backward-char}
@c by default (some modes bind it to a different command); it does not
@c insert a literal @samp{DEL} character (@acronym{ASCII} character code
@c 127).
図形文字だけが、印字されたキーをタイプすることで挿入することができます。
その他のキーは編集コマンドとして機能して、それ自体を挿入しません。
例えば、@kbd{DEL} は デフォルトで@code{delete-backward-char} 
(一部のモードは別のコマンドにバインドしている) を実行し、
文字通り @samp{DEL} 文字 (@acronym{ASCII} 文字コード 127)
を挿入するわけではありません。

@c   To insert a non-graphic character, or a character that your keyboard
@c does not support, first @dfn{quote} it by typing @kbd{C-q}
@c (@code{quoted-insert}).  There are two ways to use @kbd{C-q}:
非図形文字、あるいは使っているキーボードに無い文字を挿入する場合は、
まず @kbd{C-q} (@code{quoted-insert}) と打って文字を @dfn{クォート} (quote) 
@footnote{【訳注】なんらの解釈もせずに、単なる文字として扱う。}
します。
@kbd{C-q} には 2つの使い方があります。

@itemize @bullet
@item
@c @kbd{C-q} followed by any non-graphic character (even @kbd{C-g})
@c inserts that character.  For instance, @kbd{C-q @key{DEL}} inserts a
@c literal @samp{DEL} character.
@kbd{C-q}に続く非図形文字（@kbd{C-g}でさえも）を挿入する。
例えば、@kbd{C-q @key{DEL}} は 文字通りの @samp{DEL} 文字を挿入する。

@item
@c @kbd{C-q} followed by a sequence of octal digits inserts the character
@c with the specified octal character code.  You can use any number of
@c octal digits; any non-digit terminates the sequence.  If the
@c terminating character is @key{RET}, that @key{RET} serves only to
@c terminate the sequence.  Any other non-digit terminates the sequence
@c and then acts as normal input---thus, @kbd{C-q 1 0 1 B} inserts
@c @samp{AB}.
@kbd{C-q}に続く8進数字列は、8進数字列で指定されるコードの文字を挿入する。
8進数字の桁数はいくつでもかまわず、8進数字以外で数字列は終る。
終端の文字が@key{RET}であれば、単に数字列を終らせるだけ。
それ以外の非数字は、数字列を終らせ、その後その文字自身も通常入力として働く。
つまり、@kbd{C-q 1 0 1 B} は @samp{AB} を挿入する。

@c The use of octal sequences is disabled in ordinary non-binary
@c Overwrite mode, to give you a convenient way to insert a digit instead
@c of overwriting with it.
通常の非バイナリ上書き (overwrite)モードでは、
上書きのかわりに挿入を簡単に行う手段としているため、
この8進数字列は使えない。
@end itemize

@vindex read-quoted-char-radix
@c @noindent
@c To use decimal or hexadecimal instead of octal, set the variable
@c @code{read-quoted-char-radix} to 10 or 16.  If the radix is 16,
@c the letters @kbd{a} to @kbd{f} serve as part of a character code,
@c just like digits.  Case is ignored.
8進数のかわりに10進数や16進数を使うには、
変数@code{read-quoted-char-radix}に10や16を設定します。
基数が16の場合には、@kbd{a} から @kbd{f} までの英字は
文字コードの一部として数字と同じように扱われます。
大文字小文字の区別はありません。

@findex ucs-insert
@kindex C-x 8 RET
@c @cindex Unicode characters, inserting
@c @cindex insert Unicode character
@c @cindex characters, inserting by name or code-point
@cindex Unicode 文字を挿入する
@cindex 文字, 名前やコードポイントで挿入する
@c   Instead of @kbd{C-q}, you can use the command @kbd{C-x 8 @key{RET}}
@c (@code{ucs-insert}).  This prompts for the Unicode name or code-point
@c of a character, using the minibuffer.  If you enter a name, the
@c command provides completion (@pxref{Completion}).  If you enter a
@c code-point, it should be a hexadecimal number (which is the convention
@c for Unicode).  The command then inserts the corresponding character
@c into the buffer.  For example, both of the following insert the
@c infinity sign (Unicode code-point @code{U+221E}):
@kbd{C-q} の代わりに、
@kbd{C-x 8 @key{RET}} (@code{ucs-insert}) コマンドを使うこともできます。
これはミニバッファで文字の Unicode での名前やコードポイントの入力を促します。
名前を入力する場合、補完が使えます(@pxref{Completion})。
コードポイントを入力する場合、16 進数にします(Unicode での慣習です)。
次に、コマンドは対応する文字をバッファに挿入します。
例えば、次の例はどちらも無限大記号(Unicode コードポイント @code{U+211E})を挿入します。

@example
@kbd{C-x 8 @key{RET} infinity @key{RET}}
@kbd{C-x 8 @key{RET} 221e @key{RET}}
@end example

@c   A numeric argument to either @kbd{C-q} or @kbd{C-x 8 @key{RET}}
@c specifies how many copies of the character to insert
@c (@pxref{Arguments}).
@kbd{C-q} や @kbd{C-x 8 @key{RET}} への数引数 は、
その文字を何文字挿入するかを指定します(@pxref{Arguments})。

@node Moving Point
@c @section Changing the Location of Point
@section ポイント位置を移動する

@c @cindex arrow keys
@cindex 矢印キー
@c @cindex moving point
@c @cindex movement
@c @cindex cursor motion
@c @cindex moving the cursor
@cindex ポイントの移動
@cindex 移動
@cindex カーソルの移動
@c   To do more than insert characters, you have to know how to move
@c point (@pxref{Point}).  The keyboard commands @kbd{C-f}, @kbd{C-b},
@c @kbd{C-n}, and @kbd{C-p} move point to the right, left, down, and up,
@c respectively.  You can also move point using the @dfn{arrow keys}
@c present on most keyboards: @kbd{@key{right}}, @kbd{@key{left}},
@c @kbd{@key{down}}, and @kbd{@key{up}}; however, many Emacs users find
@c that it is slower to use the arrow keys than the control keys, because
@c you need to move your hand to the area of the keyboard where those
@c keys are located.
文字の挿入以外のことを行うには、ポイント（@pxref{Point}）
の移動方法を知っておく必要があります。
キーボードコマンドの @kbd{C-f}、@kbd{C-b}、@kbd{C-n}、@kbd{C-p} は、それぞれポイントを右、左、下、上へと動かします。
ほとんどのキーボードに は @dfn{矢印キー} (@kbd{@key{right}}、@kbd{@key{left}}、
@kbd{@key{down}}、@kbd{@key{up}})があり、
これを使ってポイントを動かすこともできます。
ただし、 Emacs ユーザの多くは、矢印キーを使うのはコントロールキーよりも遅いと感じています。
矢印キーのあるキーボードの位置にまで手を動かさなければならないからです。

@c   You can also click the left mouse button to move point to the
@c position clicked.  Emacs also provides a variety of additional
@c keyboard commands that move point in more sophisticated ways.
左マウスボタンのクリックで、ポイントをクリックした位置に動かすこともできます。
Emacs はこの他にもより洗練した方法でポイントを動かすキーボードコマンドを提供しています。

@table @kbd

@item C-f
@kindex C-f
@findex forward-char
@c Move forward one character (@code{forward-char}).
前向きに1文字移動する（@code{forward-char}）。

@item @key{right}
@kindex RIGHT
@findex right-char
@c This command (@code{right-char}) behaves like @kbd{C-f}, with one
@c exception: when editing right-to-left scripts such as Arabic, it
@c instead moves @emph{backward} if the current paragraph is a
@c right-to-left paragraph.  @xref{Bidirectional Editing}.
このコマンド (@code{right-char})は @kbd{C-f} と同様に振舞いますが、1つだけ例外があります。
アラビア語のように右横書きの文章を編集している場合、
現在の段落が右横書きの段落の場合は、前進ではなく@emph{後退}します。
@xref{Bidirectional Editing}。


@item C-b
@kindex C-b
@findex backward-char
@c Move backward one character (@code{backward-char}).
後向きに1文字移動する（@code{backward-char}）。

@item @key{left}
@kindex LEFT
@findex left-char
@c This command (@code{left-char}) behaves like @kbd{C-b}, except it
@c moves @emph{forward} if the current paragraph is right-to-left.
@c @xref{Bidirectional Editing}.
このコマンド(@code{left-char})は @kbd{C-b} のように振舞いますが、
例外として、現在の段落が右横書きの場合は、後退ではなく@emph{前進}します。
@xref{Bidirectional Editing}。

@item C-n
@c @itemx @key{down}
@kindex C-n
@kindex DOWN
@findex next-line
@c Move down one screen line (@code{next-line}).  This command attempts
@c to keep the horizontal position unchanged, so if you start in the
@c middle of one line, you move to the middle of the next.
1表示行下へ移動する（@code{next-line}）。
このコマンドは行内での横方向の位置を保とうとする。
したがって、行の途中で使うと、つぎの行の途中に移動する。

@item C-p
@c @itemx @key{up}
@kindex C-p
@kindex UP
@findex previous-line
@c Move up one screen line (@code{previous-line}).  This command
@c preserves position within the line, like @kbd{C-n}.
1表示行上へ移動する（@code{previous-line}）。
このコマンドも、@kbd{C-n} のように行の上での位置を保とうとする。

@item C-a
@c @itemx @key{Home}
@kindex C-a
@kindex HOME
@findex move-beginning-of-line
@c Move to the beginning of the line (@code{move-beginning-of-line}).
行頭に移動する（@code{beginning-of-line}）。

@item C-e
@c @itemx @key{End}
@kindex C-e
@kindex END
@findex move-end-of-line
@c Move to the end of the line (@code{move-end-of-line}).
行末に移動する（@code{end-of-line}）。

@item M-f
@kindex M-f
@findex forward-word
@c Move forward one word (@code{forward-word}).
前向きに1語移動する（@code{forward-word}）。

@item C-@key{right}
@c @itemx M-@key{right}
@kindex C-RIGHT
@kindex M-RIGHT
@findex right-word
@c This command (@code{right-word}) behaves like @kbd{M-f}, except it
@c moves @emph{backward} by one word if the current paragraph is
@c right-to-left.  @xref{Bidirectional Editing}.
このコマンド(@code{right-word}) は @kbd{M-f} と同様に振る舞うが、
例外として現在の段落が右横書きの場合は@emph{後ろ向き}に移動する。。

@item M-b
@kindex M-b
@findex backward-word
@c Move backward one word (@code{backward-word}).
後向きに1語移動する（@code{backward-word}）。

@item C-@key{left}
@c @itemx M-@key{left}
@kindex C-LEFT
@kindex M-LEFT
@findex left-word
@c This command (@code{left-word}) behaves like @kbd{M-f}, except it
@c moves @emph{forward} by one word if the current paragraph is
@c right-to-left.  @xref{Bidirectional Editing}.
このコマンド (@code{left-word}) は @kbd{M-f} と同様に振る舞うが、
例外として、現在の段落が右横書きの場合は @emph{前向き} に移動する。
@xref{Bidirectional Editing}。

@item M-r
@kindex M-r
@findex move-to-window-line-top-bottom
@c Without moving the text on the screen, reposition point on the left
@c margin of the center-most text line of the window; on subsequent
@c consecutive invocations, move point to the left margin of the top-most
@c line, the bottom-most line, and so forth, in cyclic order
@c (@code{move-to-window-line-top-bottom}).
画面上でテキストを動かさずに、ポイントをウィンドウ中央の行の左端へと移動する。
その後、連続して呼び出すと、ポイントを一番上の行の左端、
一番下の行の左端(以下同様)へと循環して移動する
(@code{move-to-window-line-top-bottom})。

@c A numeric argument says which screen line to place point on, counting
@c downward from the top of the window (zero means the top line).  A
@c negative argument counts lines up from the bottom (@minus{}1 means the
@c bottom line).  @xref{Arguments}, for more information on numeric
@c arguments.
数引数はウィンドウの上から数えて何番目の表示行にポイントを配置するかを指定する(0 が一番上の行を表す)。
負の引数はウィンドウの下端から数える
(@minus{}1 は一番下の行を表す)。数引数についての詳細は、@xref{Arguments}。

@item M-<
@kindex M-<
@findex beginning-of-buffer
@c Move to the top of the buffer (@code{beginning-of-buffer}).  With
@c numeric argument @var{n}, move to @var{n}/10 of the way from the top.
バッファの先頭に移動する（@code{beginning-of-buffer}）。
数引数@var{n}を指定すると、先頭から全体の@var{n}/10の行にポイントを移動する。

@item M->
@kindex M->
@findex end-of-buffer
@c Move to the end of the buffer (@code{end-of-buffer}).
バッファの末尾に移動する（@code{end-of-buffer}）。

@item C-v
@c @itemx @key{PageDown}
@c @itemx @key{next}
@c Scroll the display one screen forward, and move point onscreen if
@c necessary (@code{scroll-up-command}).  @xref{Scrolling}.
一画面分前向きにスクロールし、必要ならばポイントを見える位置に移動する
(@code{scroll-up-command})。 @xref{Scrolling}。

@item M-v
@c @itemx @key{PageUp}
@c @itemx @key{prior}
@c Scroll one screen backward, and move point onscreen if necessary
@c (@code{scroll-down-command}).  @xref{Scrolling}.
一画面分後ろ向きにスクロールし、必要ならばポイントを見える位置に移動する
(@code{scroll-down-command})。  @xref{Scrolling}。

@item M-x goto-char
@findex goto-char
@c Read a number @var{n} and move point to buffer position @var{n}.
@c Position 1 is the beginning of the buffer.
数 @var{n} を受け取り、ポイントをバッファ位置 @var{n} へと移動する。
位置 1 がバッファの先頭。

@item M-g M-g
@c @itemx M-g g
@kindex M-g M-g
@kindex M-g g
@findex goto-line
@c Read a number @var{n} and move point to the beginning of line number
@c @var{n} (@code{goto-line}).  Line 1 is the beginning of the buffer.  If
@c point is on or just after a number in the buffer, that is the default
@c for @var{n}.  Just type @key{RET} in the minibuffer to use it.  You can
@c also specify @var{n} by giving @kbd{M-g M-g} a numeric prefix argument.
@c @xref{Select Buffer}, for the behavior of @kbd{M-g M-g} when you give it
@c a plain prefix argument.
数 @var{n} を受け取り、ポイントを @var{n} 行目の行頭に移動する(@code{goto-line})。
1 行目がバッファの先頭。
ポイントがバッファ上で数の上、あるいは直後にある場合は、その数が @var{n} のデフォルトになる。
@key{RET} とミニバッファ打つだけでその数が使える。
前置引数を使って @kbd{M-g M-g} に @var{n} を指定することもできる。
普通の前置引数を与えた場合の @kbd{M-g M-g} の挙動については、 @xref{Select Buffer}。

@item C-x C-n
@kindex C-x C-n
@findex set-goal-column
@c Use the current column of point as the @dfn{semipermanent goal column}
@c for @kbd{C-n} and @kbd{C-p} (@code{set-goal-column}).  When a
@c semipermanent goal column is in effect, those commands always try to
@c move to this column, or as close as possible to it, after moving
@c vertically.  The goal column remains in effect until canceled.
現在ポイントがある桁を@kbd{C-n}や@kbd{C-p}の
@dfn{半恒久的な目標桁}として設定する。
半恒久的な目標桁が有効な時、これらのコマンドは常に上下に移動した後、
できるだけこの桁に移動しようとする。
この目標桁は取り消すまで有効。

@item C-u C-x C-n
@c Cancel the goal column.  Henceforth, @kbd{C-n} and @kbd{C-p} try to
@c preserve the horizontal position, as usual.
目標桁を取り消す。
これ以後、@kbd{C-n}や@kbd{C-p} は、通常のように
横方向の位置を保とうとする。
@end table

@vindex line-move-visual
@c   When a line of text in the buffer is longer than the width of the
@c window, Emacs usually displays it on two or more @dfn{screen lines}.
@c For convenience, @kbd{C-n} and @kbd{C-p} move point by screen lines,
@c as do the equivalent keys @kbd{@key{down}} and @kbd{@key{up}}.  You
@c can force these commands to move according to @dfn{logical lines}
@c (i.e., according to the text lines in the buffer) by setting the
@c variable @code{line-move-visual} to @code{nil}; if a logical line
@c occupies multiple screen lines, the cursor then skips over the
@c additional screen lines.  For details, see @ref{Continuation Lines}.
@c @xref{Variables}, for how to set variables such as
@c @code{line-move-visual}.
バッファのテキストにある行がウィンドウの幅よりも長かった場合、
Emacs は通常 複数の @dfn{表示行} に分けて行を表示します。
利便性のために、@kbd{C-n} と @kbd{C-p} はポイントを表示行で移動させ、
これは @kbd{@key{down}} キーと @kbd{@key{up}} キーも同じです。
これらのコマンドが @dfn{論理行} (つまりバッファ上の行)に従って移動するように強制することもできます。
それには @code{line-move-visual} 変数を @code{nil} に設定します。
論理行が複数の表示行にまたがっている場合、カーソルは追加の表示行を飛び越えるようになります。
詳細は、@ref{Continuation Lines}を参照。
@code{line-move-visual} のような変数の設定のしかたについては、@xref{Variables}。

@c   Unlike @kbd{C-n} and @kbd{C-p}, most of the Emacs commands that work
@c on lines work on @emph{logical} lines.  For instance, @kbd{C-a}
@c (@code{move-beginning-of-line}) and @kbd{C-e}
@c (@code{move-end-of-line}) respectively move to the beginning and end
@c of the logical line.  Whenever we encounter commands that work on
@c screen lines, such as @kbd{C-n} and @kbd{C-p}, we will point these
@c out.
@kbd{C-n} や @kbd{C-p} とは異なり、行に作用するほとんどの Emacs コマンドは、
@emph{論理}行に作用します。
例えば @kbd{C-a} (@code{move-beginning-of-line})と @kbd{C-e} (@code{move-end-of-line}) は、
それぞれ論理行の先頭と末尾に移動します。
このマニュアルでは、
@kbd{C-n} や @kbd{C-p} のように表示行に対して作用するコマンドに出会うときは、
その度に、そのことを指摘します。

@vindex track-eol
@c   When @code{line-move-visual} is @code{nil}, you can also set the
@c variable @code{track-eol} to a non-@code{nil} value.  Then @kbd{C-n}
@c and @kbd{C-p}, when starting at the end of the logical line, move to
@c the end of the next logical line.  Normally, @code{track-eol} is
@c @code{nil}.
@code{line-move-visual} が @code{nil} の場合、追加で
@code{track-eol} を非@code{nil}値に設定することができます。
この場合 @kbd{C-n} と @kbd{C-p}は、論理行の末尾で呼び出された場合、
次の論理行の末尾に移動します。
通常、@code{track-eol} は @code{nil} です。

@vindex next-line-add-newlines
@c   @kbd{C-n} normally stops at the end of the buffer when you use it on
@c the last line in the buffer.  However, if you set the variable
@c @code{next-line-add-newlines} to a non-@code{nil} value, @kbd{C-n} on
@c the last line of a buffer creates an additional line at the end and
@c moves down into it.
  @kbd{C-n} は通常バッファの最終行で使われると、バッファの末尾で停止します。
しかし、@code{next-line-add-newlines} 変数を非@code{nil}値に設定すると、
バッファ最終行での @kbd{C-n} は行をバッファの末尾に追加し、その行に移動します。

@node Erasing
@c @section Erasing Text
@section テキストの消去
@c @cindex killing characters and lines
@c @cindex deleting characters and lines
@c @cindex erasing characters and lines
@cindex 文字や行をキルする
@cindex 文字や行の削除

@table @kbd
@item @key{DEL}
@itemx @key{Backspace}
@c Delete the character before point, or the region if it is active
@c (@code{delete-backward-char}).
ポイントの直前の文字、あるいはリージョンが活性ならばリージョンを削除する
（@code{delete-backward-char}）。

@item @key{Delete}
@c Delete the character after point, or the region if it is active
@c (@code{delete-forward-char}).
ポイント直後の文字、あるいはリージョンが活性ならばリージョンを削除する
(@code{delete-forward-char}).

@item C-d
@c Delete the character after point (@code{delete-char}).
ポイントの直後の文字を削除する（@code{delete-char}）。

@item C-k
@c Kill to the end of the line (@code{kill-line}).
行末までをキルする（@code{kill-line}）。
@item M-d
@c Kill forward to the end of the next word (@code{kill-word}).
つぎの語の末尾までを前向きにキルする（@code{kill-word}）。
@item M-@key{DEL}
@c Kill back to the beginning of the previous word
@c (@code{backward-kill-word}).
まえの語の先頭までを後向きにキルする（@code{backward-kill-word}）。
@end table

@c   The @kbd{@key{DEL}} (@code{delete-backward-char}) command removes
@c the character before point, moving the cursor and the characters after
@c it backwards.  If point was at the beginning of a line, this deletes
@c the preceding newline, joining this line to the previous one.
@kbd{@key{DEL}} (@code{delete-backward-char}) コマンドはポイント直前の文字を
削除し、カーソルとカーソルの後にある文字を前に移動させます。
ポイントが行頭にあった場合は、直前の改行を削除し、現在の行と直前の行を連結します。

@c   If, however, the region is active, @kbd{@key{DEL}} instead deletes
@c the text in the region.  @xref{Mark}, for a description of the region.
ただし、リージョンが活性ならば、@kbd{@key{DEL}} は代わりに
リージョンのテキストを削除します。リージョンの説明については、@xref{Mark}。

@c   On most keyboards, @key{DEL} is labeled @key{Backspace}, but we
@c refer to it as @key{DEL} in this manual.  (Do not confuse @key{DEL}
@c with the @key{Delete} key; we will discuss @key{Delete} momentarily.)
@c On some text terminals, Emacs may not recognize the @key{DEL} key
@c properly.  @xref{DEL Does Not Delete}, if you encounter this problem.
ほとんどのキーボードで、@key{DEL} は @key{Backspace} と印刷されていますが、
このマニュアルでは @key{DEL} と呼びます。
(@key{DEL} キーと @key{Delete} キーを混同しないようにしてください。
@key{Delete} についてはこの後に述べます。)
一部のテキスト端末では、Emacs は @key{DEL} キーを正しく認識しないかもれません。
この問題が起こった場合は、@xref{DEL Does Not Delete}。

@c   The @key{delete} (@code{delete-forward-char}) command deletes in the
@c ``opposite direction'': it deletes the character after point, i.e. the
@c character under the cursor.  If point was at the end of a line, this
@c joins the following line onto this one.  Like @kbd{@key{DEL}}, it
@c deletes the text in the region if the region is active (@pxref{Mark}).
@key{delete} (@code{delete-forward-char}) コマンドは「反対の方向」に削除、
つまり、ポイント直後の文字(カーソルの下の文字)を削除します。
ポイントが行の末尾にある場合は、次の行が現在の行に連結されます。
@kbd{@key{DEL}} と同様に、リージョンが活性の場合はリージョンのテキストが削除されます
(@pxref{Mark})。

@c   @kbd{C-d} (@code{delete-char}) deletes the character after point,
@c similar to @key{delete}, but regardless of whether the region is
@c active.
@kbd{C-d} (@code{delete-char}) はポイント直後の文字を削除し、
@key{delete} と同様ですが、リージョンが活性であるかは関係ありません。

@c   @xref{Deletion}, for more detailed information about the above
@c deletion commands.
上記の削除コマンドについての詳細は、@xref{Deletion}。

@c   @kbd{C-k} (@code{kill-line}) erases (kills) a line at a time.  If
@c you type @kbd{C-k} at the beginning or middle of a line, it kills all
@c the text up to the end of the line.  If you type @kbd{C-k} at the end
@c of a line, it joins that line with the following line.
@kbd{C-k} (@code{kill-line}) は1 行ずつ削除(キル)します。
@kbd{C-k} と行の先頭か半ばで打つと、行末までのテキストを全てキルします。
@kbd{C-k} と行末で打つと、現在の行を次の行と連結します。

@c   @xref{Killing}, for more information about @kbd{C-k} and related
@c commands.
@kbd{C-k} とこれに類似のコマンドについては、@xref{Killing}。

@node Basic Undo
@c @section Undoing Changes
@section 変更をアンドゥする（もとに戻す）

@table @kbd
@item C-/
@c Undo one entry of the undo records---usually, one command worth
@c (@code{undo}).
アンドゥ記録から1項目分アンドゥする。これは通常1 コマンド分になる。
(@code{undo})。

@item C-x u
@itemx C-_
同様。
@end table

@c   Emacs records a list of changes made in the buffer text, so you can
@c undo recent changes.  This is done using the @code{undo} command,
@c which is bound to @kbd{C-/} (as well as @kbd{C-x u} and @kbd{C-_}).
@c Normally, this command undoes the last change, moving point back to
@c where it was before the change.  The undo command applies only to
@c changes in the buffer; you can't use it to undo cursor motion.
Emacs はバッファのテキストに加えられた変更のリストを記録しているので、
最近の変更をアンドゥすることができます。
これには @kbd{C-/} にバインドされている @code{undo} コマンドを使います。
通常、このコマンドは最後の変更をアンドゥし、ポイントを変更直前にあった位置に移動させます。
アンドゥコマンドはバッファの変更にしか適用されず、
カーソル移動をアンドゥすることはできません。

@c   Although each editing command usually makes a separate entry in the
@c undo records, very simple commands may be grouped together.
@c Sometimes, an entry may cover just part of a complex command.
編集コマンドは通常、アンドゥ記録に別個の項目を作りますが、
非常に単純なコマンドはまとめられることがあります。
逆に、一つの項目が複雑なコマンドの一部だけに対応していることもあります。

@c   If you repeat @kbd{C-/} (or its aliases), each repetition undoes
@c another, earlier change, back to the limit of the undo information
@c available.  If all recorded changes have already been undone, the undo
@c command displays an error message and does nothing.
@kbd{C-/} (あるいはその別名)を繰替えすと、繰替えすたびにアンドゥ情報の限界まで過去に遡ってアンドゥされます。
記録された全ての変更がすべてアンドゥされてしまった場合、
アンドゥコマンドはエラーメッセージを表示し、何も行いません。

@c   To learn more about the @code{undo} command, see @ref{Undo}.
@code{undo} コマンドについてより良く知るには、@ref{Undo}。

@node Basic Files
@c @section Files
@section ファイル

@c   Text that you insert in an Emacs buffer lasts only as long as the
@c Emacs session.  To keep any text permanently, you must put it in a
@c @dfn{file}.
Emacs のバッファに入力したテキストは Emacs のセッションが終わると消えてしまいます。
テキストを永続的に残すには、@dfn{file} に入れる必要があります。

@c   Suppose there is a file named @file{test.emacs} in your home
@c directory.  To begin editing this file in Emacs, type
例えば、ホームディレクトリに@file{test.emacs} というファイルがあるとします。
Emacs でこのファイルの編集を始めるには、以下のように打ちます。

@example
C-x C-f test.emacs @key{RET}
@end example

@noindent
@c Here the file name is given as an @dfn{argument} to the command @kbd{C-x
@c C-f} (@code{find-file}).  That command uses the @dfn{minibuffer} to
@c read the argument, and you type @key{RET} to terminate the argument
@c (@pxref{Minibuffer}).
ここではファイル名が @kbd{C-x C-f} (@code{find-file}) コマンドへの @dfn{引数} として与えられています。
このコマンドが @dfn{ミニバッファ}を使って引数を受け取り、@key{RET} と打つと引数が終端されます
(@pxref{Minibuffer})。

@c   Emacs obeys this command by @dfn{visiting} the file: it creates a
@c buffer, copies the contents of the file into the buffer, and then
@c displays the buffer for editing.  If you alter the text, you can
@c @dfn{save} the new text in the file by typing @kbd{C-x C-s}
@c (@code{save-buffer}).  This copies the altered buffer contents back
@c into the file @file{test.emacs}, making them permanent.  Until you
@c save, the changed text exists only inside Emacs, and the file
@c @file{test.emacs} is unaltered.
Emacs はこのコマンドに従ってファイルを @dfn{訪問} します。
つまり、バッファを作りファイルの内容をそのバッファにコピーし、
編集できるように表示します。
テキストを変更したら、@kbd{C-x C-s} (@code{save-buffer})で新しいテキストをファイルに @dfn{保存}できます。
このコマンドは変更されたバッファの内容を @file{test.emacs} にコピーし、永続するようにします。
保存するまでは、変更されたテキストは Emacs の中でだけ存在し、
ファイル @file{test.emacs} は変更されません。

@c   To create a file, just visit it with @kbd{C-x C-f} as if it already
@c existed.  This creates an empty buffer, in which you can insert the
@c text you want to put in the file.  Emacs actually creates the file the
@c first time you save this buffer with @kbd{C-x C-s}.
ファイルを作成するには、そのファイルが既存であるかのように、
@kbd{C-x C-f}でファイルを訪問するだけです。
これにより、空のバッファが作られ、
ファイルに収めたいテキストを挿入できるようになります。
Emacs は、始めて @kbd{C-x C-s}でバッファが保存されたときに
実際にファイルを作成します。

@c   To learn more about using files in Emacs, see @ref{Files}.
ファイルに使い方についてもっと知るには、@ref{Files} を参照。

@node Basic Help
@c @section Help
@section ヘルプ

@c @cindex getting help with keys
@cindex キーのヘルプ表示
@c   If you forget what a key does, you can find out by typing @kbd{C-h
@c k} (@code{describe-key}), followed by the key of interest; for
@c example, @kbd{C-h k C-n} tells you what @kbd{C-n} does.
キーの機能を忘れてしまった場合には、@kbd{C-h k} (@code{describe-key})と打って、
問題のキーを打てば調べられます。
例えば、@kbd{C-h k C-n} は @kbd{C-n} の機能を説明します。

@c   The prefix key @kbd{C-h} stands for ``help''.  The key @key{F1}
@c serves as an alias for @kbd{C-h}.  Apart from @kbd{C-h k}, there are
@c many other help commands providing different kinds of help.
@kbd{C-h} プレフィックスキーは「ヘルプ(help)」の意味です。
@key{F1} は @kbd{C-h} の別名です。
@kbd{C-h k} の他にも、たくさんのヘルプコマンドがあり、
いろんな種類のヘルプを提供しています。

@c   @xref{Help}, for details.
詳細は、@xref{Help}。

@node Blank Lines
@c @section Blank Lines
@section 空行

@c @cindex inserting blank lines
@c @cindex deleting blank lines
@cindex 空行の挿入
@cindex 空行の削除
@c   Here are special commands and techniques for inserting and deleting
@c blank lines.
空行の挿入と削除に関する特別なコマンドや技法を紹介します。

@table @kbd
@item C-o
@c Insert a blank line after the cursor (@code{open-line}).
カーソルの直後に空行を挿入する（@code{open-line}）。
@item C-x C-o
@c Delete all but one of many consecutive blank lines
@c (@code{delete-blank-lines}).
連続する空行を1行だけ残してすべて削除する（@code{delete-blank-lines}）。
@end table

@kindex C-o
@kindex C-x C-o
@c @cindex blank lines
@cindex 空行
@findex open-line
@findex delete-blank-lines
@c   We have seen how @kbd{@key{RET}} (@code{newline}) starts a new line
@c of text.  However, it may be easier to see what you are doing if you
@c first make a blank line and then insert the desired text into it.
@c This is easy to do using the key @kbd{C-o} (@code{open-line}), which
@c inserts a newline after point but leaves point in front of the
@c newline.  After @kbd{C-o}, type the text for the new line.
@kbd{@key{RET}} (@code{newline}) は新しい行を始めるのでした。
しかし、まず空行を作ってから、
そこに希望のテキストを挿入するほうが何をしているのかがわかりやすいかも知れません。
キー@kbd{C-o}（@code{open-line}）を使えば簡単です。
これはポイントの直後に改行を挿入して、
ポイントは改行の直前に置かれたままとなります。
@kbd{C-o}に続けて、新しい行のテキストを打ちます。

@c   You can make several blank lines by typing @kbd{C-o} several times, or
@c by giving it a numeric argument specifying how many blank lines to make.
@c @xref{Arguments}, for how.  If you have a fill prefix, the @kbd{C-o}
@c command inserts the fill prefix on the new line, if typed at the
@c beginning of a line.  @xref{Fill Prefix}.
複数の空行を作るには、@kbd{C-o}を数回打つか、
作りたい空行の個数を指定する数引数を指定します。
数引数の指定方法は、@xref{Arguments}。
詰め込み接頭辞を設定してある場合、
行の先頭で@kbd{C-o}コマンドを使うと、
このコマンドは新しい行に詰め込み接頭辞を挿入します。
@xref{Fill Prefix}。

@c   The easy way to get rid of extra blank lines is with the command
@c @kbd{C-x C-o} (@code{delete-blank-lines}).  If point lies within a run
@c of several blank lines, @kbd{C-x C-o} deletes all but one of them.  If
@c point is on a single blank line, @kbd{C-x C-o} deletes it.  If point
@c is on a nonblank line, @kbd{C-x C-o} deletes all following blank
@c lines, if any exists.
余分な空行を削除するには、
コマンド@kbd{C-x C-o}（@code{delete-blank-lines}）を使います。
ポイントが連続する複数の空行の中にあれば、@kbd{C-x C-o} は
1行を残してすべての空行を削除します。
ポイントが単独の空行にある場合、@kbd{C-x C-o} はその空行自体を削除します。
空行でない行にポイントがある場合、
その行に空行が一つでも続けば、それらをすべて削除します。

@node Continuation Lines
@c @section Continuation Lines
@section 継続行

@c @cindex continuation line
@c @cindex wrapping
@c @cindex line wrapping
@c @cindex fringes, and continuation lines
@cindex 継続行
@cindex 折り返し
@cindex 行の折り返し
@cindex フリンジ, フリンジと継続行

@c   Sometimes, a line of text in the buffer---a @dfn{logical line}---is
@c too long to fit in the window, and Emacs displays it as two or more
@c @dfn{screen lines}.  This is called @dfn{line wrapping} or
@c @dfn{continuation}, and the long logical line is called a 
@c @dfn{continued line}.  On a graphical display, Emacs indicates line
@c wrapping with small bent arrows in the left and right window fringes.
@c On a text terminal, Emacs indicates line wrapping by displaying a
@c @samp{\} character at the right margin.
しばしば、バッファ上での行--- @dfn{論理行} ---がウィンドウに収まりきらないことがあります。
この時 Emacs はその行を複数の @dfn{表示行}として表示します。
これは @dfn{行の折り返し}あるいは @dfn{継続}と呼び、この長い論理行を @dfn{継続された行}と呼びます。
グラフィック端末では、 Emacs は行の折り返しを左右のウィンドウフリンジに小さな曲がった矢印で示します。
テキスト端末では、Emacs は行の折り返しを文字 @samp{\} を画面の右端に表示することで示します。

@c   Most commands that act on lines act on logical lines, not screen
@c lines.  For instance, @kbd{C-k} kills a logical line.  As described
@c earlier, @kbd{C-n} (@code{next-line}) and @kbd{C-p}
@c (@code{previous-line}) are special exceptions: they move point down
@c and up, respectively, by one screen line (@pxref{Moving Point}).
行に作用するほとんどのコマンドは表示行ではなく、論理行に対して作用します。
例えば、@kbd{C-k} は論理行をキルします。
前述のように、@kbd{C-n} (@code{next-line}) と@kbd{C-p} (@code{previous-line}) は、
特殊な例外です。この2つは表示行で上下にポイントを移動します(@pxref{Moving Point})。

@c @cindex truncation
@c @cindex line truncation, and fringes
@cindex 行の切り捨て, フリンジ
@c   Emacs can optionally @dfn{truncate} long logical lines instead of
@c continuing them.  This means that every logical line occupies a single
@c screen line; if it is longer than the width of the window, the rest of
@c the line is not displayed.  On a graphical display, a truncated line
@c is indicated by a small straight arrow in the right fringe; on a text
@c terminal, it is indicated by a @samp{$} character in the right margin.
@c @xref{Line Truncation}.
オプションで長い論理行を継続すのではなく @dfn{切り捨て} ることもできます。
この場合、1論理行が1表示行に対応するようになります。
論理行がウィンドウの幅よりも長い場合は、収まらなかった部分は表示されません。
グラフィックディスプレイでは、切り捨てられた行は 右のフリンジに 小さなまっすぐの矢印で示されます。
テキスト端末では画面右端の @samp{$} 文字によって示されます。@xref{Line Truncation}。

@c   By default, continued lines are wrapped at the right window edge.
@c Since the wrapping may occur in the middle of a word, continued lines
@c can be difficult to read.  The usual solution is to break your lines
@c before they get too long, by inserting newlines.  If you prefer, you
@c can make Emacs insert a newline automatically when a line gets too
@c long, by using Auto Fill mode.  @xref{Filling}.
デフォルトでは、継続された行はウィンドウの右端で折り返されます。
単語の半ばで折り返しが起こることもあるので、継続された行は読み辛いこともあります。
通常の対処法は、行が長くなりすぎる前に、改行を挿入することで行を分割することです。
お好みなら Auto Fill モードを使って、
行が長くなりすぎる前に Emacs に自動で改行を挿入させることもできます。
@xref{Filling}。

@c @cindex word wrap
@cindex ワードラップ
@c   Sometimes, you may need to edit files containing many long logical
@c lines, and it may not be practical to break them all up by adding
@c newlines.  In that case, you can use Visual Line mode, which enables
@c @dfn{word wrapping}: instead of wrapping long lines exactly at the
@c right window edge, Emacs wraps them at the word boundaries (i.e.,
@c space or tab characters) nearest to the right window edge.  Visual
@c Line mode also redefines editing commands such as @code{C-a},
@c @code{C-n}, and @code{C-k} to operate on screen lines rather than
@c logical lines.  @xref{Visual Line Mode}.
時には、たくさんの長い論理行を含んだファイルを編集する必要があり、
改行を追加してその全てを分割することが現実的でない場合もあるでしょう。
その場合、Visual Line モードが使えます。これは、@dfn{ワードラップ} を有効にし、
長い行をきっちりウィンドウの右端で折り返すのではなく、
最もウィンドウの右端に近い語境界 (つまり、スペース文字やタブ文字)
で折り返すようにします。
Visual Line モードはさらに、@code{C-a}、@code{C-n}、@code{C-k}
などの編集コマンドを論理行ではなく表示行に対して作用するように再定義します。
@xref{Visual Line Mode}。

@node Position Info
@c @section Cursor Position Information
@section カーソル位置の情報

@c   Here are commands to get information about the size and position of
@c parts of the buffer, and to count words and lines.
バッファのある部分の大きさや位置に関する情報を得るコマンドや
行や単語を数えるコマンドを紹介します。

@table @kbd
@item M-x what-line
@c Display the line number of point.
ポイント位置の行番号を表示する。
@item M-x line-number-mode
@itemx M-x column-number-mode
@c Toggle automatic display of the current line number or column number.
@c @xref{Optional Mode Line}.
現在の行番号あるいは桁番号の表示を切り替える。
@xref{Optional Mode Line}.

@item M-=
@c Display the number of lines, words, and characters that are present in
@c the region (@code{count-words-region}).  @xref{Mark}, for information
@c about the region.
リージョンにある行、単語、文字の数を表示する(@code{count-words-region})。
リージョンについては、@xref{Mark}。

@item M-x count-words
@c Display the number of lines, words, and characters that are present in
@c the buffer.  If the region is active (@pxref{Mark}), display the
@c numbers for the region instead.
バッファにある行、単語、文字の数を表示する。
リージョンが活性の場合(@pxref{Mark})、リージョンに関してこれらの数を表示する。

@item C-x =
@c Display the character code of character after point, character position of
@c point, and column of point (@code{what-cursor-position}).
ポイントの直後にある文字の文字コード、ポイントの文字位置、
ポイントの桁位置を表示する（@code{what-cursor-position}）。

@item M-x hl-line-mode
@c Enable or disable highlighting of the current line.  @xref{Cursor
@c Display}.
現在行の強調表示をオン/オフする。
@xref{Cursor Display}。
@item M-x size-indication-mode
@c Toggle automatic display of the size of the buffer.
@c @xref{Optional Mode Line}.
バッファサイズの自動表示を切り替える。
@xref{Optional Mode Line}。
@end table

@findex what-line
@c @cindex line number commands
@c @cindex location of point
@c @cindex cursor location
@c @cindex point location
@cindex 行番号コマンド
@cindex ポイント位置
@cindex カーソル位置
@c   @kbd{M-x what-line} displays the current line number in the echo
@c area.  This command is usually redundant, because the current line
@c number is shown in the mode line (@pxref{Mode Line}).  However, if you
@c narrow the buffer, the mode line shows the line number relative to
@c the accessible portion (@pxref{Narrowing}).  By contrast,
@c @code{what-line} displays both the line number relative to the
@c narrowed region and the line number relative to the whole buffer.
@kbd{M-x what-line} は現在の行番号をエコー領域に表示します。
このコマンドは通常冗長です。なぜなら現在の行番号はモード行に表示されているからです
(@pxref{Mode Line})。
しかし、バッファをナロイングしてある場合、
モード行中の行番号は参照可能な範囲内での相対的なものになります
（@pxref{Narrowing}）。
対照的に、@code{what-line}は、
ナロイングされた範囲内での行番号と、
バッファ全体での行番号の両方を表示します。

@kindex M-=
@findex count-words-region
@findex count-words
@c   @kbd{M-=} (@code{count-words-region}) displays a message reporting
@c the number of lines, words, and characters in the region.  @kbd{M-x
@c count-words} displays a similar message for the entire buffer, or for
@c the region if the region is @dfn{active}.  @xref{Mark}, for an
@c explanation of the region.
@kbd{M-=} (@code{count-words-region}) はリージョンにある行、単語、文字の数を報告するメッセージを表示します。
@kbd{M-x count-words} は同様のメッセージをバッファ全体について、あるいは
リージョンが @dfn{活性} な時はリージョンについて表示します。
リージョンについての説明は、@xref{Mark}。

@kindex C-x =
@findex what-cursor-position
@c   The command @kbd{C-x =} (@code{what-cursor-position}) shows
@c information about the current cursor position and the buffer contents
@c at that position.  It displays a line in the echo area that looks like
@c this:
@kbd{C-x =} (@code{what-cursor-position}) コマンドは現在のカーソル位置および
その位置でのバッファの内容についての情報を表示します。
このコマンドは以下のような行をエコー領域に表示します。

@smallexample
Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
@end smallexample

@c   After @samp{Char:}, this shows the character in the buffer at point.
@c The text inside the parenthesis shows the corresponding decimal, octal
@c and hex character codes; for more information about how @kbd{C-x =}
@c displays character information, see @ref{International Chars}.  After
@c @samp{point=} is the position of point as a character count (the first
@c character in the buffer is position 1, the second character is
@c position 2, and so on).  The number after that is the total number of
@c characters in the buffer, and the number in parenthesis expresses the
@c position as a percentage of the total.  After @samp{column=} is the
@c horizontal position of point, in columns counting from the left edge
@c of the window.
@samp{Char:}に続いて、バッファでポイント位置にある文字が表示されます。
括弧中のテキストは対応する10、8、16進法での文字コードを表しています。
@kbd{C-x =}が表示する文字情報の詳細は、@ref{International Chars}を参照。
@samp{point=} に続いて、文字の数で数えられたポイント位置が表示されます(バッファ先頭の文字が位置 1、2文字目が位置 2、以下同様)。
それに続く数は、バッファ内の文字の総数、そして括弧で囲まれた数は全体に対する百分率での位置を表します。
@samp{column=} に続いては、ポイントの水平方向での位置を、ウィンドウの左端から数えた桁数で表示しています。

@c   If the buffer has been narrowed, making some of the text at the
@c beginning and the end temporarily inaccessible, @kbd{C-x =} displays
@c additional text describing the currently accessible range.  For
@c example, it might display this:
バッファがナロイングされ、バッファの始めと終りにあるテキストが一時的にアクセスできなくなっている場合、@kbd{C-x =} は現在アクセスできる範囲についての追加のテキストを表示します。
例えば、

@smallexample
Char: C (67, #o103, #x43) point=252 of 889 (28%) <231-599> column=0
@end smallexample

@noindent
@c where the two extra numbers give the smallest and largest character
@c position that point is allowed to assume.  The characters between
@c those two positions are the accessible ones.  @xref{Narrowing}.
では、二つの数が追加され、ポイントが持つことのできる最小と最大の文字位置を示しています。
この二つの文字位置の間の文字が、アクセスできる文字です。
@xref{Narrowing}。

@node Arguments
@c @section Numeric Arguments
@c @cindex numeric arguments
@c @cindex prefix arguments
@c @cindex arguments to commands
@section 数引数
@cindex 数引数
@cindex 前置引数
@cindex コマンドへの引数

@c   In the terminology of mathematics and computing, @dfn{argument}
@c means ``data provided to a function or operation''.  You can give any
@c Emacs command a @dfn{numeric argument} (also called a @dfn{prefix
@c argument}).  Some commands interpret the argument as a repetition
@c count.  For example, giving @kbd{C-f} an argument of ten causes it to
@c move point forward by ten characters instead of one.  With these
@c commands, no argument is equivalent to an argument of one, and
@c negative arguments cause them to move or act in the opposite
@c direction.
数学とコンピュータの用語では、@dfn{引数} は「関数や操作に提供されるデータ」を意味します。
どんな Emacs コマンドにでも @dfn{数引数} (@dfn{前置引数}とも)を与えることができます。
一部のコマンドは引数を反復回数として解釈します。
例えば、@kbd{C-f} に引数 10 を与えると 1 文字分でなく 10文字分前に進みます。
この種のコマンドのでは引数の無いことは引数 1 に等しくなり、
負の引数は反対の方向への移動などを行わせます。

@kindex M-1
@kindex M-@t{-}
@findex digit-argument
@findex negative-argument
@c   The easiest way to specify a numeric argument is to type a digit
@c and/or a minus sign while holding down the @key{META} key.  For
@c example,
数引数を指定する一番簡単な方法は @key{META} キーを押し下げながら数やマイナス記号をタイプすることです。例えば、

@example
M-5 C-n
@end example

@noindent
@c moves down five lines.  The keys @kbd{M-1}, @kbd{M-2}, and so on, as
@c well as @kbd{M--}, are bound to commands (@code{digit-argument} and
@c @code{negative-argument}) that set up an argument for the next
@c command.  @kbd{Meta--} without digits normally means @minus{}1.
は、5行下へ移動します。
@kbd{Meta-1}、@kbd{Meta-2}、@kbd{Meta--}などのキーは、
後続のコマンドに引数を設定するように定義されたコマンド
（@code{digit-argument}と@code{negative-argument}）にバインドされています。
数字の無い @kbd{Meta--} は通常 @minus{}1 を意味します。

@c If you enter more than one digit, you need not hold down the
@c @key{META} key for the second and subsequent digits.  Thus, to move
@c down fifty lines, type
数字を複数入力する場合は、2文字目とそれ以降の数字に対しては @key{META} を押し下げる必要はありません。
したがって、50 行下へ移動するには、

@example
M-5 0 C-n
@end example

とタイプします。

@noindent
@c Note that this @emph{does not} insert five copies of @samp{0} and move
@c down one line, as you might expect---the @samp{0} is treated as part
@c of the prefix argument.
これが @samp{0} を5つ挿入し、1行下へ移動するのでは@emph{ない}ことに注意してください。
@samp{0} は前置引数の一部として扱われます。

@c (What if you do want to insert five copies of @samp{0}?  Type @kbd{M-5
@c C-u 0}.  Here, @kbd{C-u} ``terminates'' the prefix argument, so that
@c the next keystroke begins the command that you want to execute.  Note
@c that this meaning of @kbd{C-u} applies only to this case.  For the
@c usual role of @kbd{C-u}, see below.)
(本当に @samp{0} を5つ挿入したい場合はどうするのでしょう？
@kbd{M-5 C-u 0} です。
ここで、@kbd{C-u} は前置引数を「終端」し、したがって、
続くキーストロークは実行したいコマンドを開始しています。
この @kbd{C-u} の意味はこのような場合に限ることに注意してください。
@kbd{C-u} の通常の役割については、下記を参照。)

@kindex C-u
@findex universal-argument
@c   Instead of typing @kbd{M-1}, @kbd{M-2}, and so on, another way to
@c specify a numeric argument is to type @kbd{C-u}
@c (@code{universal-argument}) followed by some digits, or (for a
@c negative argument) a minus sign followed by digits.  A minus sign
@c without digits normally means @minus{}1.
@kbd{M-1}、@kbd{M-2}等のように打つ他に、数引数を指定する方法として、
@kbd{C-u} (@code{universal-argument}) につづいて数字や、
マイナス記号とそれにつづいて数字を打つものがあります。
数字なしのマイナス記号は通常 @minus{}1 を表します。

@c   @kbd{C-u} alone has the special meaning of ``four times'': it
@c multiplies the argument for the next command by four.  @kbd{C-u C-u}
@c multiplies it by sixteen.  Thus, @kbd{C-u C-u C-f} moves forward
@c sixteen characters.  Other useful combinations are @kbd{C-u C-n},
@c @kbd{C-u C-u C-n} (move down a good fraction of a screen), @kbd{C-u
@c C-u C-o} (make ``a lot'' of blank lines), and @kbd{C-u C-k} (kill four
@c lines).
単独の @kbd{C-u} は特別に「4回」を意味します。
これは次のコマンドへの引数を4倍します。
@kbd{C-u C-u} は引数を16倍します。
よって、@kbd{C-u C-u C-f} は 16 文字分前に進むことになります。
その他の便利な組み合わせは、@kbd{C-u C-n}、@kbd{C-u C-u C-n} 
(画面上の結構な距離を下に移動する)、
@kbd{C-u C-u C-o} (「たくさん」の空行を作る)、
そして @kbd{C-u C-k} (4行キルする) です。

@c   You can use a numeric argument before a self-inserting character to
@c insert multiple copies of it.  This is straightforward when the
@c character is not a digit; for example, @kbd{C-u 6 4 a} inserts 64
@c copies of the character @samp{a}.  But this does not work for
@c inserting digits; @kbd{C-u 6 4 1} specifies an argument of 641.  You
@c can separate the argument from the digit to insert with another
@c @kbd{C-u}; for example, @kbd{C-u 6 4 C-u 1} does insert 64 copies of
@c the character @samp{1}.
それ自体を挿入する文字の前に数引数を指定して、
その文字のコピーを複数挿入することができます。
これは文字が数字でない場合は簡単です。
例えば @kbd{C-u 6 4 a} 64個の @samp{a} を挿入します。
しかしこれは数字を挿入するときは使えません。
@kbd{C-u 6 4 1} では 641 という引数になってしまいます。
引数と、挿入したい数字とは @kbd{C-u} をもう一度打つことで区切ることができます。
例えば、@kbd{C-u 6 4 C-u 1} とすれば 64 個の @samp{1} が挿入されます。

@c   Some commands care whether there is an argument, but ignore its
@c value.  For example, the command @kbd{M-q} (@code{fill-paragraph})
@c fills text; with an argument, it justifies the text as well.
@c (@xref{Filling}, for more information on @kbd{M-q}.)  For these
@c commands, it is enough to the argument with a single @kbd{C-u}.
一部のコマンドは引数の有無を見ますが、その値は無視します。
例えば、@kbd{M-q} (@code{fill-paragraph})はテキストを詰め込みます。
引数があると、テキストの行揃えも行われます。
(@kbd{M-q} について詳しくは、@xref{Filling}。)
このようなコマンドは単独の @kbd{C-u} による引数で十分です。

@c   Some commands use the value of the argument as a repeat count, but
@c do something special when there is no argument.  For example, the
@c command @kbd{C-k} (@code{kill-line}) with argument @var{n} kills
@c @var{n} lines, including their terminating newlines.  But @kbd{C-k}
@c with no argument is special: it kills the text up to the next newline,
@c or, if point is right at the end of the line, it kills the newline
@c itself.  Thus, two @kbd{C-k} commands with no arguments can kill a
@c nonblank line, just like @kbd{C-k} with an argument of one.
@c (@xref{Killing}, for more information on @kbd{C-k}.)
引数の値を反復回数として使うにも関わらず、
引数がないと特別な動作をするコマンドもあります。
たとえば、@kbd{C-k}（@code{kill-line}）に引数@var{n}を指定すると、
行区切りの改行も含めて@var{n}行をキルします。
これに対し、引数を指定しない場合は特別な動作となります。
つまり、つぎの改行文字までのテキストをキルするか、
行末にポイントがある場合は改行そのものをキルします。
したがって、引数を指定せずに@kbd{C-k}を2回実行すると、
引数1を指定した@kbd{C-k}と同様に、空行でない1行をキルします。
（@kbd{C-k}の詳細については、@pxref{Killing}。）

@c   A few commands treat a plain @kbd{C-u} differently from an ordinary
@c argument.  A few others may treat an argument of just a minus sign
@c differently from an argument of @minus{}1.  These unusual cases are
@c described when they come up; they exist to make an individual command
@c more convenient, and they are documented in that command's
@c documentation string.
いくつかのコマンドは、@kbd{C-u}だけの引数を通常の引数とは
異なるものとして扱います。
また、マイナス記号のみの引数を@minus{}1と区別するコマンドもあります。
これらの例外については、必要になったときに説明します。
これらの例外は、それぞれのコマンドを使いやすくするために存在し、
コマンドのドキュメント文字列に記述されています。

@c   We use the term ``prefix argument'' as well as ``numeric argument'',
@c to emphasize that you type these argument before the command, and to
@c distinguish them from minibuffer arguments that come after the
@c command.
コマンドのまえに引数を打つということを強調するために、また、
コマンドのあとのミニバッファ引数と区別するために、
『数引数』と同様に用語『前置引数』を使います。

@node Repeating
@c @section Repeating a Command
@c @cindex repeating a command
@section コマンドを繰り返す
@cindex コマンドを繰り返す

@c   Many simple commands, such as those invoked with a single key or
@c with @kbd{M-x @var{command-name} @key{RET}}, can be repeated by
@c invoking them with a numeric argument that serves as a repeat count
@c (@pxref{Arguments}).  However, if the command you want to repeat
@c prompts for input, or uses a numeric argument in another way, that
@c method won't work.
多くの単純なコマンド
(例えば単一のキーや @kbd{M-x @var{command-name} @key{RET}} で呼び出すもの)は、
反復回数を表わす数引数を伴なって呼び出すことで、繰替えすことができます。
ただし、繰り返したいコマンドが入力を促す場合、あるいは数引数を他の目的で使っている場合は、この方法は使えません。

@kindex C-x z
@findex repeat
@c   The command @kbd{C-x z} (@code{repeat}) provides another way to repeat
@c an Emacs command many times.  This command repeats the previous Emacs
@c command, whatever that was.  Repeating a command uses the same arguments
@c that were used before; it does not read new arguments each time.
コマンド@kbd{C-x z}（@code{repeat}）は、
Emacsコマンドを何回も反復する別の方法です。
このコマンドは、直前のEmacsコマンドが何であっても、それを繰り返します。
繰り返されるコマンドは、まえと同じ引数を使います。
毎回、新たに引数を読むことはしません。

@c   To repeat the command more than once, type additional @kbd{z}'s: each
@c @kbd{z} repeats the command one more time.  Repetition ends when you
@c type a character other than @kbd{z}, or press a mouse button.
コマンドを2回以上繰り返すには、@kbd{z}を追加して打ちます。
1つの@kbd{z}で、コマンドを1回繰り返します。
@kbd{z}以外の文字を打つか、マウスボタンを押すと、
繰り返しを終了します。

@c   For example, suppose you type @kbd{C-u 2 0 C-d} to delete 20
@c characters.  You can repeat that command (including its argument) three
@c additional times, to delete a total of 80 characters, by typing @kbd{C-x
@c z z z}.  The first @kbd{C-x z} repeats the command once, and each
@c subsequent @kbd{z} repeats it once again.
たとえば、20文字削除するために@kbd{C-u 2 0 C-d}と打ったとしましょう。
@kbd{C-x z z z}と打てば、
（引数を含めて）削除コマンドをさらに3回繰り返し、全部で80文字削除できます。
始めの@kbd{C-x z}でコマンドを1回繰り返し、
そのあとのそれぞれの@kbd{z}で1回ずつ繰り返します。
